#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ADSUN Process Management
Spr√°va procesov - zoznam, edit√°cia, mazanie
"""

import streamlit as st
import sqlite3
import json
from datetime import datetime
from typing import Dict, List, Optional
from ui_components import render_section_header, render_action_buttons, render_modern_dataframe

def get_fallback_processes():
    """Vr√°ti fallback procesy ak datab√°za nefunguje"""
    return [
        {
            'id': 1,
            'name': 'Spracovanie objedn√°vok z√°kazn√≠kov',
            'category': 'obchod',
            'owner': 'M√°ria Nov√°k - Obchodn√Ω mana≈æ√©r',
            'frequency': 'denne',
            'duration_minutes': 45,
            'priority': 5,
            'automation_readiness': 4,
            'created_at': '2024-01-01'
        },
        {
            'id': 2,
            'name': 'Schvaƒæovanie dovoleniek',
            'category': 'HR',
            'owner': 'Peter Kov√°ƒç - HR mana≈æ√©r',
            'frequency': 't√Ω≈ædenne',
            'duration_minutes': 15,
            'priority': 3,
            'automation_readiness': 5,
            'created_at': '2024-01-02'
        },
        {
            'id': 3,
            'name': 'Faktur√°cia dod√°vateƒæom',
            'category': 'administrat√≠va',
            'owner': 'Anna Kr√°sna - √öƒçtovn√≠ƒçka',
            'frequency': 'denne',
            'duration_minutes': 20,
            'priority': 4,
            'automation_readiness': 3,
            'created_at': '2024-01-03'
        }
    ]

def render_process_management():
    """Render spr√°vy procesov - zoznam, edit√°cia, mazanie"""
    
    st.markdown("### üîç DEBUG INFORM√ÅCIE")
    st.info("Testovanie naƒç√≠tavania procesov...")
    
    # Naƒç√≠tanie procesov s detailn√Ωm debugom
    processes = []
    debug_info = []
    
    try:
        import os
        db_path = "adsun_processes.db"
        
        # Debug: skontroluj s√∫bor
        if os.path.exists(db_path):
            file_size = os.path.getsize(db_path)
            debug_info.append(f"‚úÖ Datab√°za existuje: {db_path} ({file_size} bytov)")
        else:
            debug_info.append(f"‚ùå Datab√°za neexistuje: {db_path}")
            st.error("Datab√°za neexistuje! Pou≈æ√≠vam fallback d√°ta.")
            processes = get_fallback_processes()
        
        if not processes:  # Ak e≈°te st√°le nem√°me procesy, sk√∫s naƒç√≠ta≈• z DB
            with sqlite3.connect(db_path) as conn:
                conn.row_factory = sqlite3.Row
                
                # Debug: skontroluj tabuƒæky
                cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
                tables = [row[0] for row in cursor.fetchall()]
                debug_info.append(f"üìä Tabuƒæky v DB: {tables}")
                
                if 'processes' in tables:
                    # Debug: skontroluj stƒ∫pce
                    cursor = conn.execute("PRAGMA table_info(processes)")
                    columns = [row[1] for row in cursor.fetchall()]
                    debug_info.append(f"üìã Stƒ∫pce v processes: {columns}")
                    
                    # Sk√∫s naƒç√≠ta≈• procesy
                    if 'is_active' in columns:
                        cursor = conn.execute("""
                            SELECT id, name, category, owner, frequency, duration_minutes, 
                                   priority, automation_readiness, created_at
                            FROM processes 
                            WHERE is_active = 1
                            ORDER BY category, name
                        """)
                    else:
                        # Ak ch√Ωba is_active stƒ∫pec
                        cursor = conn.execute("""
                            SELECT id, name, category, owner, frequency, duration_minutes, 
                                   priority, automation_readiness, created_at
                            FROM processes 
                            ORDER BY category, name
                        """)
                    
                    processes = [dict(row) for row in cursor.fetchall()]
                    debug_info.append(f"üìà Naƒç√≠tan√Ωch procesov: {len(processes)}")
                    
                else:
                    debug_info.append("‚ùå Tabuƒæka 'processes' neexistuje")
                    processes = get_fallback_processes()
                    
    except Exception as e:
        debug_info.append(f"‚ùå Chyba: {str(e)}")
        st.error(f"‚ùå Chyba naƒç√≠tavania: {e}")
        processes = get_fallback_processes()
    
    # Zobraz debug info
    with st.expander("üîç Debug inform√°cie", expanded=True):
        for info in debug_info:
            st.text(info)
    
    # Ak st√°le nem√°me procesy, pou≈æij fallback
    if not processes:
        st.warning("‚ö†Ô∏è ≈Ωiadne procesy v datab√°ze. Pou≈æ√≠vam uk√°≈ækov√© d√°ta.")
        processes = get_fallback_processes()
    
    # Modern√Ω header so ≈°tatistikami
    stats = {
        "total": {"icon": "üìã", "text": f"{len(processes)} procesov"},
        "categories": {"icon": "üìÇ", "text": f"{len(set(p.get('category', 'Nezhodnoten√©') for p in processes))} kateg√≥ri√≠"},
        "owners": {"icon": "üë•", "text": f"{len(set(p.get('owner', 'Neurƒçen√Ω') for p in processes))} vlastn√≠kov"}
    }
    
    render_section_header(
        title="Spr√°va procesov",
        subtitle="Kompletn√Ω zoznam procesov s mo≈ænos≈•ou edit√°cie a mazania",
        icon="üìã",
        stats=stats
    )
    
    # DETAILY MIMO EXPANDERA - AK S√ö ZOBRAZEN√â
    if 'show_process_details' in st.session_state:
        process_id = st.session_state.show_process_details
        st.markdown("---")
        show_process_details(process_id)
        
        if st.button("‚ùå Zavrie≈• detaily", type="secondary"):
            del st.session_state.show_process_details
            st.rerun()
        
        st.markdown("---")
    
    # Filter a vyhƒæad√°vanie
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        search = st.text_input("üîç Vyhƒæad√°vanie procesov", placeholder="n√°zov, kateg√≥ria, vlastn√≠k...")
    
    with col2:
        categories = ["V≈°etky"] + list(set([p.get('category', 'Nezhodnoten√©') for p in processes]))
        selected_category = st.selectbox("üìÇ Kateg√≥ria", categories)
    
    with col3:
        if st.button("‚ûï Nov√Ω proces"):
            st.session_state.mode = "learning"
            st.rerun()
    
    # Filtrovanie procesov
    filtered_processes = processes
    if search:
        filtered_processes = [
            p for p in filtered_processes 
            if search.lower() in str(p.get('name', '')).lower() 
            or search.lower() in str(p.get('category', '')).lower()
            or search.lower() in str(p.get('owner', '')).lower()
        ]
    
    if selected_category != "V≈°etky":
        filtered_processes = [p for p in filtered_processes if p.get('category') == selected_category]
    
    # Zobrazenie procesov v tabuƒæke
    if not filtered_processes:
        st.info("üì≠ ≈Ωiadne procesy nen√°jden√©")
        return
    
    st.markdown(f"**N√°jden√Ωch: {len(filtered_processes)} procesov**")
    
    # Tabuƒæka procesov
    for i, process in enumerate(filtered_processes):
        with st.expander(f"üìã {process.get('name', 'Bez n√°zvu')} ({process.get('category', 'Nezhodnoten√©')})", expanded=False):
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                # Z√°kladn√© info
                st.write(f"**Vlastn√≠k:** {process.get('owner', 'Neurƒçen√Ω')}")
                st.write(f"**Frekvencia:** {process.get('frequency', 'Neurƒçen√©')}")
                st.write(f"**Trvanie:** {process.get('duration_minutes', 0) or 0} min√∫t")
                st.write(f"**Priorita:** {process.get('priority', 'Neurƒçen√©')}")
                st.write(f"**Automatiz√°cia:** {process.get('automation_readiness', 0)}/5")
                st.write(f"**Vytvoren√©:** {process.get('created_at', '')[:10] if process.get('created_at') else 'Nezn√°me'}")
            
            with col2:
                if st.button("‚úèÔ∏è Upravi≈•", key=f"edit_{process['id']}"):
                    st.session_state.edit_process_id = process['id']
                    st.session_state.mode = "edit_process"
                    st.rerun()
                
                # TLAƒåIDLO DETAILY TERAZ ZOBRAZUJE MIMO EXPANDERA
                if st.button("üìä Detaily", key=f"detail_{process['id']}"):
                    st.session_state.show_process_details = process['id']
                    st.rerun()
            
            with col3:
                if st.button("üóëÔ∏è Zmaza≈•", key=f"delete_{process['id']}", type="secondary"):
                    if st.session_state.get(f"confirm_delete_{process['id']}", False):
                        delete_process(process['id'])
                        st.success("‚úÖ Proces zmazan√Ω!")
                        st.rerun()
                    else:
                        st.session_state[f"confirm_delete_{process['id']}"] = True
                        st.warning("‚ö†Ô∏è Kliknite znovu pre potvrdenie")

def show_process_details(process_id: int):
    """Zobraz√≠ detaily procesu"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            
            # Proces
            cursor = conn.execute("SELECT * FROM processes WHERE id = ?", (process_id,))
            process = dict(cursor.fetchone())
            
            # Sessions
            cursor = conn.execute("""
                SELECT * FROM documentation_sessions 
                WHERE process_id = ? 
                ORDER BY created_at DESC
            """, (process_id,))
            sessions = [dict(row) for row in cursor.fetchall()]
            
            st.markdown(f"### üìä Detaily: {process['name']}")
            
            # √öPLNE BEZ STƒπPCOV - v≈°etko pod sebou na pln√∫ ≈°√≠rku
            st.markdown("#### üìã Z√°kladn√© inform√°cie")
            
            # V≈°etko pod sebou namiesto stƒ∫pcov
            st.markdown(f"**üè¢ Kateg√≥ria/Oddelenie:** {process.get('category', 'Nezhodnoten√©')}")
            st.markdown(f"**üë§ Vlastn√≠k procesu:** {process.get('owner', 'Neurƒçen√Ω')}")
            st.markdown(f"**‚ö° Priorita procesu:** {process.get('priority', 'Neurƒçen√©')}")
            st.markdown(f"**üîÑ Frekvencia vykon√°vania:** {process.get('frequency', 'Neurƒçen√©')}")
            st.markdown(f"**‚è±Ô∏è ƒåas potrebn√Ω na vykonanie:** {process.get('duration_minutes', 0) or 0} min√∫t")
            st.markdown(f"**ü§ñ √örove≈à automatiz√°cie:** {process.get('automation_readiness', 0)}/5")
            
            # Oddeƒæovaƒç
            st.markdown("---")
            
            # Detailn√© inform√°cie na pln√∫ ≈°√≠rku
            if process.get('description'):
                st.markdown("#### üìù Popis procesu")
                st.markdown(f"**{process['description']}**")
                st.markdown("")
            
            if process.get('steps'):
                st.markdown("#### üìã Hlavn√© kroky procesu") 
                st.markdown(process['steps'])
                st.markdown("")
            
            if process.get('step_details'):
                st.markdown("#### üìù Detailn√Ω popis krokov") 
                st.markdown(process['step_details'])
                st.markdown("")
            
            if process.get('tools'):
                st.markdown("#### üõ†Ô∏è N√°stroje a syst√©my")
                st.markdown(process['tools'])
                st.markdown("")
            
            if process.get('risks'):
                st.markdown("#### ‚ö†Ô∏è Rizik√° a probl√©my")
                st.markdown(process['risks'])
                st.markdown("")
            
            if process.get('improvements'):
                st.markdown("#### üöÄ Mo≈ænosti zlep≈°enia")
                st.markdown(process['improvements'])
                st.markdown("")
            
            # Hist√≥ria dokument√°cie - BEZ EXPANDERS, ≈°irok√Ω form√°t
            if sessions:
                st.markdown("#### üìù Hist√≥ria dokument√°cie")
                st.markdown("---")
                
                # Zobraz sessions v ≈°irokom form√°te
                for i, session in enumerate(sessions[:3]):  # Top 3
                    st.markdown(f"**üìÖ Dokumentaƒçn√° session {i+1}**")
                    st.markdown(f"*Dokumentoval:* {session.get('documented_by', 'Nezn√°my')} | *D√°tum:* {session.get('created_at', '')[:16]}*")
                    
                    if session.get('session_notes'):
                        try:
                            notes = json.loads(session['session_notes'])
                            
                            # ≈†irok√Ω layout pre ot√°zky a odpovede - na pln√∫ ≈°√≠rku
                            st.markdown(f"**‚ùì Ot√°zka:** {notes.get('question', 'N/A')}")
                            st.markdown(f"**üí¨ Odpoveƒè:** {notes.get('response', 'N/A')}")
                                
                        except:
                            st.markdown(f"**üìÑ Pozn√°mky:** {session['session_notes']}")
                    
                    if i < len(sessions[:3]) - 1:  # Nie posledn√Ω
                        st.markdown("---")
            else:
                st.info("üìù ≈Ωiadna hist√≥ria dokument√°cie")
            
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania detailov: {e}")

def delete_process(process_id: int):
    """Zma≈æe proces z datab√°zy"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            # Soft delete - oznaƒç√≠ ako neakt√≠vny
            conn.execute("UPDATE processes SET is_active = 0 WHERE id = ?", (process_id,))
            conn.commit()
    except Exception as e:
        st.error(f"‚ùå Chyba mazania: {e}")

def render_edit_process():
    """Edit√°cia procesu"""
    st.markdown("## ‚úèÔ∏è Edit√°cia procesu")
    st.markdown("*Upravte detaily procesu*")
    
    # Z√≠skaj ID procesu na edit√°ciu
    process_id = st.session_state.get('edit_process_id')
    if not process_id:
        st.error("‚ùå ≈Ωiadny proces na edit√°ciu")
        if st.button("üîô Sp√§≈• na zoznam"):
            st.session_state.mode = "process_management"
            st.rerun()
        return
    
    # Naƒç√≠taj proces z datab√°zy
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("SELECT * FROM processes WHERE id = ?", (process_id,))
            process = dict(cursor.fetchone())
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania: {e}")
        return
    
    # Editaƒçn√Ω formul√°r
    with st.form("edit_process_form"):
        st.markdown(f"### Edit√°cia: {process['name']}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            new_name = st.text_input("N√°zov procesu:", value=process.get('name', ''))
            new_category = st.selectbox("Kateg√≥ria:", 
                                      ["obchod", "v√Ωroba", "administrat√≠va", "IT", "HR"],
                                      index=["obchod", "v√Ωroba", "administrat√≠va", "IT", "HR"].index(process.get('category', 'obchod')) if process.get('category') in ["obchod", "v√Ωroba", "administrat√≠va", "IT", "HR"] else 0)
            new_owner = st.text_input("Vlastn√≠k:", value=process.get('owner', ''))
            new_frequency = st.selectbox("Frekvencia:", 
                                       ["denne", "t√Ω≈ædenne", "mesaƒçne", "pr√≠le≈æitostne"],
                                       index=["denne", "t√Ω≈ædenne", "mesaƒçne", "pr√≠le≈æitostne"].index(process.get('frequency', 'pr√≠le≈æitostne')) if process.get('frequency') in ["denne", "t√Ω≈ædenne", "mesaƒçne", "pr√≠le≈æitostne"] else 3)
        
        with col2:
            new_duration = st.number_input("Trvanie (min√∫ty):", value=process.get('duration_minutes', 0) or 0, min_value=0)
            new_priority = st.selectbox("Priorita:",
                                      ["vysok√°", "stredn√°", "n√≠zka"],
                                      index=["vysok√°", "stredn√°", "n√≠zka"].index(process.get('priority', 'stredn√°')) if process.get('priority') in ["vysok√°", "stredn√°", "n√≠zka"] else 1)
            new_automation = st.slider("Automatiz√°cia (1-5):", 1, 5, value=process.get('automation_readiness', 3) or 3)
        
        # Pokroƒçil√© nastavenia
        with st.expander("üîß Pokroƒçil√© nastavenia"):
            new_trigger = st.text_area("Sp√∫≈°≈•aƒç procesu:", value=process.get('trigger_type', ''))
            new_success = st.text_area("Krit√©ri√° √∫spechu:", value=process.get('success_criteria', ''))
            new_problems = st.text_area("ƒåast√© probl√©my:", value=process.get('common_problems', ''))
        
        # Tlaƒçidl√°
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            submit_button = st.form_submit_button("üíæ Ulo≈æi≈• zmeny", type="primary")
        
        with col2:
            if st.form_submit_button("‚ùå Zru≈°i≈•"):
                st.session_state.mode = "process_management"
                st.rerun()
        
        with col3:
            if st.form_submit_button("üóëÔ∏è Zmaza≈• proces"):
                st.session_state.confirm_delete_edit = True
    
    # Spracovanie ulo≈æenia
    if submit_button:
        try:
            with sqlite3.connect("adsun_processes.db") as conn:
                conn.execute("""
                    UPDATE processes 
                    SET name = ?, category = ?, owner = ?, frequency = ?, 
                        duration_minutes = ?, priority = ?, automation_readiness = ?,
                        trigger_type = ?, success_criteria = ?, common_problems = ?,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                """, (
                    new_name, new_category, new_owner, new_frequency,
                    new_duration, new_priority, new_automation,
                    new_trigger, new_success, new_problems,
                    process_id
                ))
                conn.commit()
            
            st.success("‚úÖ Proces √∫spe≈°ne upraven√Ω!")
            st.session_state.mode = "process_management"
            if 'edit_process_id' in st.session_state:
                del st.session_state.edit_process_id
            st.rerun()
            
        except Exception as e:
            st.error(f"‚ùå Chyba ukladania: {e}")
    
    # Potvrdenie mazania
    if st.session_state.get('confirm_delete_edit'):
        st.warning("‚ö†Ô∏è Naozaj chcete zmaza≈• tento proces?")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚úÖ √Åno, zmaza≈•", type="primary"):
                try:
                    with sqlite3.connect("adsun_processes.db") as conn:
                        conn.execute("UPDATE processes SET is_active = 0 WHERE id = ?", (process_id,))
                        conn.commit()
                    
                    st.success("‚úÖ Proces zmazan√Ω!")
                    st.session_state.mode = "process_management"
                    if 'edit_process_id' in st.session_state:
                        del st.session_state.edit_process_id
                    if 'confirm_delete_edit' in st.session_state:
                        del st.session_state.confirm_delete_edit
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå Chyba mazania: {e}")
        
        with col2:
            if st.button("‚ùå Nie, zru≈°i≈•"):
                if 'confirm_delete_edit' in st.session_state:
                    del st.session_state.confirm_delete_edit
                st.rerun()
    
    # Sp√§≈• button
    st.markdown("---")
    if st.button("üîô Sp√§≈• na spr√°vu procesov"):
        st.session_state.mode = "process_management"
        if 'edit_process_id' in st.session_state:
            del st.session_state.edit_process_id
        st.rerun() 

def render_process_learning():
    """AI-driven uƒçenie nov√©ho procesu s inteligentn√Ωm dopƒ∫≈àan√≠m"""
    st.markdown("### ü§ñ AI Asistent pre nov√Ω proces")
    st.markdown("*AI v√°m pom√¥≈æe vyplni≈• v≈°etky polia o procese*")
    
    # INICIALIZ√ÅCIA D√ÅT AK NEEXISTUJ√ö - MUSI BY≈§ PRED PRV√ùM PR√çSTUPOM!
    if 'current_process_data' not in st.session_state:
        st.session_state.current_process_data = {}
    
    # DEFIN√çCIA POL√ç - MUSI BY≈§ PRED PRV√ùM POU≈ΩIT√çM!
    process_fields = [
        {
            'key': 'name',
            'label': 'N√°zov procesu',
            'question': 'Ak√Ω je n√°zov nov√©ho procesu?',
            'placeholder': 'napr. Vystavenie fakt√∫ry, Prijatie objedn√°vky, N√°bor zamestnanca',
            'ai_prompt': 'Navrhni 3 alternat√≠vne n√°zvy pre proces typu {value}'
        },
        {
            'key': 'category',
            'label': 'Kateg√≥ria/Oddelenie',
            'question': 'Do akej kateg√≥rie alebo oddelenia proces patri?',
            'placeholder': 'napr. Obchod, HR, √öƒçtovn√≠ctvo, IT',
            'ai_prompt': 'Navrhni vhodn√∫ kateg√≥riu pre proces {name}'
        },
        {
            'key': 'description',
            'label': 'Popis procesu',
            'question': 'Ako by ste op√≠sali tento proces?',
            'placeholder': 'Struƒçn√Ω popis ƒço proces rob√≠...',
            'ai_prompt': 'Nap√≠≈° jasn√Ω popis procesu {name} v oddelen√≠ {category}'
        },
        {
            'key': 'owner',
            'label': 'Vlastn√≠k procesu',
            'question': 'Kto je zodpovedn√Ω za tento proces?',
            'placeholder': 'Meno alebo poz√≠cia zodpovednej osoby...',
            'ai_prompt': 'Navrhni typ poz√≠cie zodpovednej za proces {name}'
        },
        {
            'key': 'steps',
            'label': 'Hlavn√© kroky (struƒçne)',
            'question': 'Ak√© s√∫ hlavn√© kroky tohto procesu? (len n√°zvy krokov)',
            'placeholder': '1. Prv√Ω krok\n2. Druh√Ω krok\n3. Tret√≠ krok',
            'ai_prompt': 'Nap√≠≈° HLAVN√â KROKY procesu {name} ako struƒçn√Ω zoznam bez detailov'
        },
        {
            'key': 'step_details',
            'label': 'Detailn√Ω popis krokov',
            'question': 'Pop√≠≈°te detailne ƒço sa deje v ka≈ædom kroku procesu',
            'placeholder': '1. Prv√Ω krok: Detailn√Ω popis ƒço sa presne deje...\n2. Druh√Ω krok: Detailn√Ω popis...',
            'ai_prompt': 'Nap√≠≈° DETAILN√â kroky procesu {name} vr√°tane opisu ƒço sa v ka≈ædom kroku presne deje, kto je zodpovedn√Ω a ak√© n√°stroje sa pou≈æ√≠vaj√∫'
        },
        {
            'key': 'frequency',
            'label': 'Frekvencia',
            'question': 'Ako ƒçasto sa tento proces vykon√°va?',
            'placeholder': 'napr. Denne, T√Ω≈ædenne, Mesaƒçne, Podƒæa potreby',
            'ai_prompt': 'Navrhni typick√∫ frekvenciu pre proces {name}'
        },
        {
            'key': 'duration_minutes',
            'label': 'Trvanie (min√∫ty)',
            'question': 'Koƒæko ƒçasu proces trv√°?',
            'placeholder': 'Poƒçet min√∫t...',
            'ai_prompt': 'Odhadni typick√© trvanie procesu {name} v min√∫tach'
        },
        {
            'key': 'priority',
            'label': 'Priorita',
            'question': 'Ak√° je priorita tohto procesu?',
            'placeholder': '1-10 (1=n√≠zka, 10=vysok√°)',
            'ai_prompt': 'Ohodno≈• prioritu procesu {name} na ≈°k√°le 1-10'
        },
        {
            'key': 'tools',
            'label': 'N√°stroje a syst√©my',
            'question': 'Ak√© n√°stroje sa pri procese pou≈æ√≠vaj√∫?',
            'placeholder': 'Software, aplik√°cie, dokumenty...',
            'ai_prompt': 'Navrhni n√°stroje a syst√©my potrebn√© pre proces {name}'
        },
        {
            'key': 'risks',
            'label': 'Rizik√° a probl√©my',
            'question': 'Ak√© rizik√° m√¥≈æu pri procese nasta≈•?',
            'placeholder': 'Mo≈æn√© probl√©my a komplik√°cie...',
            'ai_prompt': 'Identifikuj hlavn√© rizik√° a probl√©my procesu {name}'
        },
        {
            'key': 'automation_readiness',
            'label': 'Mo≈ænos≈• automatiz√°cie',
            'question': 'D√° sa tento proces automatizova≈•?',
            'placeholder': '1-5 (1=nemo≈æn√©, 5=√∫plne automatizovateƒæn√©)',
            'ai_prompt': 'Ohodno≈• mo≈ænos≈• automatiz√°cie procesu {name} na ≈°k√°le 1-5'
        },
        {
            'key': 'improvements',
            'label': 'Mo≈ænosti zlep≈°enia',
            'question': 'Ako by sa dal proces zlep≈°i≈•?',
            'placeholder': 'N√°vrhy na optimaliz√°ciu...',
            'ai_prompt': 'Navrhni mo≈ænosti zlep≈°enia a optimaliz√°cie procesu {name}'
        }
    ]
    
    # KONTROLA PREPNUTIA NA STEP-BY-STEP - po defin√≠cii process_fields
    if st.session_state.get('switch_to_step_by_step', False):
        # Vyƒçist√≠me flag a resetujeme na step-by-step
        del st.session_state.switch_to_step_by_step
        # Nastav√≠me default hodnotu pre radio (bude sa zobrazova≈• step-by-step)
        default_method = "üîÑ Postupn√Ω sprievodca (krok za krokom)"
    else:
        # Ak nie je flag nastaven√Ω, pou≈æijeme existuj√∫cu hodnotu alebo default
        default_method = st.session_state.get('process_creation_method', "üîÑ Postupn√Ω sprievodca (krok za krokom)")
    
    # V√ùBER SP√îSOBU VYTVORENIA PROCESU
    st.markdown("#### üéØ Vyberte sp√¥sob vytvorenia procesu:")
    
    creation_method = st.radio(
        "Ako chcete vytvori≈• proces?",
        [
            "üîÑ Postupn√Ω sprievodca (krok za krokom)",
            "üìã Bulk import z ChatGPT konverz√°cie"
        ],
        index=0 if default_method == "üîÑ Postupn√Ω sprievodca (krok za krokom)" else 1
        # ODSTR√ÅNEN√ù key parameter pre predch√°dzanie session state konfliktom
    )
    
    if creation_method == "üìã Bulk import z ChatGPT konverz√°cie":
        render_bulk_import_mode()
        return
    
    # P√îVODN√ù POSTUPN√ù SPRIEVODCA
    st.markdown("---")
    st.markdown("**üîÑ Postupn√Ω sprievodca - krok za krokom**")
    
    # KONTROLA PREDVYPLNEN√ùCH D√ÅT - po defin√≠cii process_fields
    if st.session_state.current_process_data:
        filled_fields = sum(1 for field in process_fields if st.session_state.current_process_data.get(field['key']))
        total_fields = len(process_fields)
        
        # PROGRESS BAR
        progress = filled_fields / total_fields
        st.progress(progress, text=f"üìä Pokrok: {filled_fields}/{total_fields} pol√≠ vyplnen√Ωch ({progress:.0%})")
        
        st.info(f"üìã **Predvyplnen√© d√°ta:** {filled_fields}/{total_fields} pol√≠ u≈æ vyplnen√Ωch z bulk importu")
        
        # Mo≈ænos≈• preskoƒçi≈• na nevyplnen√© polia
        if filled_fields < total_fields:
            col1, col2 = st.columns([2, 1])
            with col1:
                st.markdown("üí° *M√¥≈æete zaƒça≈• od prv√©ho nevyplnen√©ho poƒæa alebo prech√°dza≈• postupne*")
            with col2:
                if st.button("‚è≠Ô∏è Preskoƒç na nevyplnen√©"):
                    # N√°jdi prv√Ω nevyplnen√Ω krok
                    for i, field in enumerate(process_fields):
                        if not st.session_state.current_process_data.get(field['key']):
                            st.session_state.process_learning_step = i
                            st.rerun()
                            break
        else:
            st.success("üéâ **V≈°etky polia s√∫ vyplnen√©!** M√¥≈æete pokraƒçova≈• na fin√°lny prehƒæad")
            if st.button("üèÅ Prejs≈• na fin√°lny prehƒæad"):
                st.session_state.process_learning_step = len(process_fields)
                st.rerun()
        
        # Zobrazenie prehƒæadu predvyplnen√Ωch d√°t
        with st.expander("üëÄ Zobrazi≈• v≈°etky predvyplnen√© d√°ta"):
            for field in process_fields:
                value = st.session_state.current_process_data.get(field['key'], '')
                if value:
                    st.markdown(f"‚úÖ **{field['label']}:** {value[:100]}{'...' if len(str(value)) > 100 else ''}")
                else:
                    st.markdown(f"‚≠ï **{field['label']}:** *Nevyplnen√©*")
    
    # Polia pre proces s AI promptmi
    current_step = st.session_state.get('process_learning_step', 0)
    
    if current_step < len(process_fields):
        field = process_fields[current_step]
        
        # VYLEP≈†EN√ù HEADER S INDIK√ÅTOROM STAVU
        is_field_filled = bool(st.session_state.current_process_data.get(field['key']))
        status_icon = "‚úÖ" if is_field_filled else "‚≠ï"
        status_text = "u≈æ vyplnen√©" if is_field_filled else "nevyplnen√©"
        
        st.markdown(f"### üéØ Krok {current_step + 1}/{len(process_fields)}: {status_icon} {field['label']}")
        
        if is_field_filled:
            st.success(f"üí° **Toto pole je {status_text}** z bulk importu - m√¥≈æete hodnotu upravi≈• alebo ponecha≈•")
        else:
            st.info(f"üìù **Toto pole je {status_text}** - zadajte nov√∫ hodnotu alebo pou≈æite AI pomoc")
        
        # ≈†peci√°lne spracovanie pre kateg√≥riu - uk√°≈æ existuj√∫ce kateg√≥rie
        if field['key'] == 'category':
            existing_categories = load_existing_categories()
            if existing_categories:
                st.info(f"üìÇ **Existuj√∫ce kateg√≥rie:** {', '.join(existing_categories)}")
                st.markdown(f"**Ot√°zka:** {field['question']} M√¥≈æete vybra≈• existuj√∫cu alebo zada≈• nov√∫.")
            else:
                st.info(field['question'])
        else:
            st.info(field['question'])
        
        # Hlavn√© pole pre input
        col1, col2 = st.columns([3, 1])
        
        with col1:
            # ≈†peci√°lne spracovanie pre category - selectbox + mo≈ænos≈• vlastn√©ho
            if field['key'] == 'category':
                existing_categories = load_existing_categories()
                current_value = st.session_state.current_process_data.get(field['key'], '')
                
                if existing_categories:
                    # Ak existuj√∫ kateg√≥rie, pon√∫kni v√Ωber
                    options = ["-- Vybra≈• existuj√∫cu --"] + existing_categories + ["-- Zada≈• nov√∫ --"]
                    
                    if current_value and current_value in existing_categories:
                        index = existing_categories.index(current_value) + 1
                    elif current_value:
                        index = len(options) - 1  # "Zada≈• nov√∫"
                    else:
                        index = 0
                    
                    selection = st.selectbox(
                        "üìÇ Vyberte kateg√≥riu:",
                        options,
                        index=index,
                        key=f"cat_select_{field['key']}"
                    )
                    
                    if selection == "-- Zada≈• nov√∫ --" or (selection == "-- Vybra≈• existuj√∫cu --" and current_value):
                        user_input = st.text_input(
                            "‚úçÔ∏è N√°zov novej kateg√≥rie:",
                            value=current_value if selection == "-- Zada≈• nov√∫ --" else "",
                            placeholder=field['placeholder'],
                            key=f"field_{field['key']}"
                        )
                    elif selection != "-- Vybra≈• existuj√∫cu --":
                        user_input = selection
                        # D√îLE≈ΩIT√â: Okam≈æite aktualizuj session state
                        st.session_state.current_process_data[field['key']] = selection
                    else:
                        user_input = current_value
                else:
                    # ≈Ωiadne existuj√∫ce kateg√≥rie - pon√∫kni z√°kladn√© mo≈ænosti
                    basic_categories = ["obchod", "v√Ωroba", "administrat√≠va", "IT", "HR", "in√©"]
                    
                    if current_value and current_value in basic_categories:
                        index = basic_categories.index(current_value)
                    else:
                        index = 0
                    
                    user_input = st.selectbox(
                        "üìÇ Vyberte kateg√≥riu:",
                        basic_categories,
                        index=index,
                        key=f"field_{field['key']}"
                    )
                    
                    # D√îLE≈ΩIT√â: Okam≈æite aktualizuj session state
                    st.session_state.current_process_data[field['key']] = user_input
            elif field['key'] in ['description', 'steps', 'step_details', 'tools', 'risks', 'improvements']:
                user_input = st.text_area(
                    "‚úçÔ∏è Va≈°a odpoveƒè:",
                    value=st.session_state.current_process_data.get(field['key'], ''),
                    placeholder=field['placeholder'],
                    height=100,
                    key=f"field_{field['key']}"
                )
            elif field['key'] in ['duration_minutes', 'priority', 'automation_readiness']:
                user_input = st.number_input(
                    "‚úçÔ∏è Va≈°a odpoveƒè:",
                    value=int(st.session_state.current_process_data.get(field['key'], 0)) if st.session_state.current_process_data.get(field['key']) else 0,
                    min_value=0,
                    max_value=10 if field['key'] in ['priority', 'automation_readiness'] else 9999,
                    key=f"field_{field['key']}"
                )
            else:
                user_input = st.text_input(
                    "‚úçÔ∏è Va≈°a odpoveƒè:",
                    value=st.session_state.current_process_data.get(field['key'], ''),
                    placeholder=field['placeholder'],
                    key=f"field_{field['key']}"
                )
        
        with col2:
            st.markdown("**ü§ñ AI Pomoc**")
            if st.button("‚ú® AI Doplni≈•", key=f"ai_help_{field['key']}"):
                ai_suggestion = get_process_ai_suggestion(field, st.session_state.current_process_data)
                if ai_suggestion:
                    st.session_state[f"ai_suggestion_{field['key']}"] = ai_suggestion
                    st.rerun()
        
        # AI n√°vrh ak existuje
        if f"ai_suggestion_{field['key']}" in st.session_state:
            st.success(f"ü§ñ AI n√°vrh: {st.session_state[f'ai_suggestion_{field['key']}']}")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ Pou≈æi≈• AI n√°vrh", key=f"use_ai_{field['key']}"):
                    st.session_state.current_process_data[field['key']] = st.session_state[f'ai_suggestion_{field['key']}']
                    del st.session_state[f'ai_suggestion_{field['key']}']
                    st.rerun()
            with col2:
                if st.button("‚ùå Zamietnu≈•", key=f"reject_ai_{field['key']}"):
                    del st.session_state[f'ai_suggestion_{field['key']}']
                    st.rerun()
        
        # Navigaƒçn√© tlaƒçidl√°
        col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
        
        with col1:
            if st.button("‚¨ÖÔ∏è Sp√§≈•") and current_step > 0:
                st.session_state.current_process_data[field['key']] = user_input
                st.session_state.process_learning_step = current_step - 1
                st.rerun()
        
        with col2:
            if st.button("‚û°Ô∏è ƒéalej"):
                st.session_state.current_process_data[field['key']] = user_input
                st.session_state.process_learning_step = current_step + 1
                st.rerun()
        
        with col3:
            if st.button("üíæ Ulo≈æi≈• proces") and st.session_state.current_process_data.get('name'):
                st.session_state.current_process_data[field['key']] = user_input
                
                # DEBUG INFO
                st.write("üîç **DEBUG:** Pok√∫≈°am sa ulo≈æi≈• proces...")
                st.write(f"üìù **D√°ta na ulo≈æenie:** {len(st.session_state.current_process_data)} pol√≠")
                
                try:
                    save_process_to_db(st.session_state.current_process_data)
                    st.success("‚úÖ Proces √∫spe≈°ne ulo≈æen√Ω!")
                    
                    # ZOBRAZ NAVIGAƒåN√â MO≈ΩNOSTI
                    st.markdown("### üéâ Proces bol vytvoren√Ω!")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if st.button("‚ûï Vytvori≈• ƒèal≈°√≠", key="create_another"):
                            # Vyƒçisti d√°ta
                            st.session_state.current_process_data = {}
                            st.session_state.process_learning_step = 0
                            st.rerun()
                    
                    with col2:
                        if st.button("üìã Spr√°va procesov", key="goto_processes"):
                            st.session_state.mode = "processes"
                            st.rerun()
                    
                    with col3:
                        if st.button("üè† Domov", key="goto_home"):
                            st.session_state.mode = "home"
                            st.rerun()
                    
                    # NEPOU≈Ω√çVAJ st.rerun() automaticky
                    return
                    
                except Exception as e:
                    st.error(f"‚ùå CHYBA ukladania: {e}")
                    st.write(f"üîç **DEBUG ERROR:** {str(e)}")
                    return
        
        with col4:
            if st.button("‚ùå Zru≈°i≈•"):
                st.session_state.mode = "processes"
                st.rerun()
        
        # Aktualizuj d√°ta
        st.session_state.current_process_data[field['key']] = user_input
        
    else:
        # V≈°etky polia vyplnen√© - fin√°lny prehƒæad
        st.success("üéâ V≈°etky polia vyplnen√©!")
        st.markdown("### üìã Prehƒæad procesu:")
        
        for field in process_fields:
            value = st.session_state.current_process_data.get(field['key'], '')
            if value:
                st.markdown(f"**{field['label']}:** {value}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üíæ Ulo≈æi≈• proces", type="primary"):
                # DEBUG INFO
                st.write("üîç **DEBUG:** FIN√ÅLNY PREHƒΩAD - Pok√∫≈°am sa ulo≈æi≈• proces...")
                st.write(f"üìù **D√°ta na ulo≈æenie:** {len(st.session_state.current_process_data)} pol√≠")
                for key, value in st.session_state.current_process_data.items():
                    st.write(f"  - {key}: {str(value)[:50]}{'...' if len(str(value)) > 50 else ''}")
                
                try:
                    save_process_to_db(st.session_state.current_process_data)
                    st.success("‚úÖ Proces vytvoren√Ω!")
                    
                    # NAVIGAƒåN√â MO≈ΩNOSTI
                    st.markdown("### üéâ √öspe≈°ne vytvoren√Ω!")
                    nav_col1, nav_col2, nav_col3 = st.columns(3)
                    
                    with nav_col1:
                        if st.button("‚ûï Vytvori≈• ƒèal≈°√≠", key="final_create_another"):
                            st.session_state.current_process_data = {}
                            st.session_state.process_learning_step = 0
                            st.rerun()
                    
                    with nav_col2:
                        if st.button("üìã Spr√°va procesov", key="final_goto_processes"):
                            st.session_state.mode = "processes"
                            st.rerun()
                    
                    with nav_col3:
                        if st.button("üè† Domov", key="final_goto_home"):
                            st.session_state.mode = "home"
                            st.rerun()
                    
                    return
                    
                except Exception as e:
                    st.error(f"‚ùå CHYBA ukladania: {e}")
                    st.write(f"üîç **DEBUG ERROR:** {str(e)}")
                    return
        
        with col2:
            if st.button("üìù Upravi≈•"):
                st.session_state.process_learning_step = 0
                st.rerun()

def render_bulk_import_mode():
    """Bulk import z ChatGPT konverz√°cie"""
    st.markdown("### üìã Bulk Import z ChatGPT konverz√°cie")
    st.markdown("**üí° N√°vod:** Skop√≠rujte cel√∫ konverz√°ciu z ChatGPT kde ste diskutovali o procese a AI automaticky vypln√≠ v≈°etky polia.")
    
    # Pr√≠klad form√°tu
    with st.expander("üìñ Pr√≠klad ChatGPT konverz√°cie"):
        st.markdown("""
**Pr√≠klad spr√°vneho form√°tu:**

```
Pou≈æ√≠vateƒæ: Chcem vytvori≈• proces faktur√°cie pre na≈°u firmu

ChatGPT: Proces faktur√°cie je kƒæ√∫ƒçov√Ω administrat√≠vny proces. M√¥≈æem v√°m pom√¥c≈• ho navrhn√∫≈•:

**N√°zov procesu:** Faktur√°cia klientom
**Kateg√≥ria:** Administrat√≠va  
**Popis:** Kompletn√Ω proces od objedn√°vky po zaplatenie fakt√∫ry

**Kroky procesu:**
1. Pr√≠jem objedn√°vky od klienta
2. Overenie √∫dajov a dostupnosti
3. Vytvorenie fakt√∫ry v syst√©me
4. Odoslanie fakt√∫ry klientovi
5. Sledovanie platby

**N√°stroje:** Excel, Gmail, √∫ƒçtovn√Ω syst√©m, CRM
**Frekvencia:** Denne
**Trvanie:** 15 min√∫t
**Priorita:** Vysok√° (8/10)
**Automatiz√°cia:** 4/5 - mo≈æn√© automatizova≈• a≈æ na kontrolu
**Rizik√°:** Chyby v √∫dajoch, oneskorenie platby
```
        """)
    
    # Vstupn√© pole pre konverz√°ciu
    conversation_text = st.text_area(
        "üìù Vlo≈æte ChatGPT konverz√°ciu:",
        height=400,
        placeholder="Skop√≠rujte sem cel√∫ konverz√°ciu z ChatGPT...",
        key="bulk_conversation_input"
    )
    
    # Tlaƒçidl√°
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if st.button("üöÄ Spracova≈• AI", type="primary", disabled=not conversation_text.strip()):
            with st.spinner("ü§ñ AI parsuje konverz√°ciu..."):
                parsed_data = parse_chatgpt_conversation(conversation_text)
                if parsed_data:
                    st.session_state.bulk_parsed_data = parsed_data
                    st.rerun()
                else:
                    st.error("‚ùå AI nedok√°zalo parsova≈• konverz√°ciu. Sk√∫ste in√Ω form√°t.")
    
    with col2:
        if st.button("üîÑ Prepn√∫≈• na sprievodcu"):
            # ODSTR√ÅNEN√â - nenastavujem radio widget session state
            # Namiesto toho pou≈æijem flag pre prepnutie
            st.session_state.switch_to_step_by_step = True
            st.rerun()
    
    with col3:
        if st.button("‚ùå Zru≈°i≈•"):
            st.session_state.mode = "processes"
            st.rerun()
    
    # Zobrazenie parsovan√Ωch d√°t
    if 'bulk_parsed_data' in st.session_state:
        parsed_data = st.session_state.bulk_parsed_data
        
        st.markdown("---")
        st.success("‚úÖ AI √∫spe≈°ne parsovalo konverz√°ciu!")
        st.markdown("### üìã Extraktovan√© d√°ta:")
        st.info("üí° **M√¥≈æete upravi≈• ƒæubovoƒæn√© pole pred ulo≈æen√≠m**")
        
        # EDITOVATEƒΩN√Å FORMA PRE V≈†ETKY POLIA
        with st.form("edit_bulk_data_form"):
            st.markdown("#### ‚úèÔ∏è Upravte parsovan√© d√°ta:")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üìä Z√°kladn√© inform√°cie**")
                
                edited_name = st.text_input(
                    "üìù N√°zov procesu:",
                    value=parsed_data.get('name', ''),
                    key="edit_name"
                )
                
                edited_category = st.text_input(
                    "üìÇ Kateg√≥ria:",
                    value=parsed_data.get('category', ''),
                    key="edit_category"
                )
                
                edited_owner = st.text_input(
                    "üë§ Vlastn√≠k:",
                    value=parsed_data.get('owner', ''),
                    key="edit_owner"
                )
                
                edited_frequency = st.text_input(
                    "üîÑ Frekvencia:",
                    value=parsed_data.get('frequency', ''),
                    key="edit_frequency"
                )
            
            with col2:
                st.markdown("**‚öôÔ∏è Detaily procesu**")
                
                edited_duration = st.number_input(
                    "‚è±Ô∏è Trvanie (min√∫ty):",
                    value=int(parsed_data.get('duration_minutes', 0)) if parsed_data.get('duration_minutes') else 0,
                    min_value=0,
                    key="edit_duration"
                )
                
                edited_priority = st.number_input(
                    "‚ö° Priorita (1-10):",
                    value=int(parsed_data.get('priority', 5)) if parsed_data.get('priority') else 5,
                    min_value=1,
                    max_value=10,
                    key="edit_priority"
                )
                
                edited_automation = st.number_input(
                    "ü§ñ Automatiz√°cia (1-5):",
                    value=int(parsed_data.get('automation_readiness', 3)) if parsed_data.get('automation_readiness') else 3,
                    min_value=1,
                    max_value=5,
                    key="edit_automation"
                )
            
            # Dlh√© texty na pln√∫ ≈°√≠rku
            st.markdown("**üìù Detailn√© inform√°cie**")
            
            edited_description = st.text_area(
                "üìñ Popis procesu:",
                value=parsed_data.get('description', ''),
                height=80,
                key="edit_description"
            )
            
            edited_steps = st.text_area(
                "üìã Hlavn√© kroky (struƒçne):",
                value=parsed_data.get('steps', ''),
                height=80,
                key="edit_steps"
            )
            
            edited_step_details = st.text_area(
                "üìù Detailn√Ω popis krokov:",
                value=parsed_data.get('step_details', ''),
                height=120,
                key="edit_step_details"
            )
            
            edited_tools = st.text_area(
                "üõ†Ô∏è N√°stroje a syst√©my:",
                value=parsed_data.get('tools', ''),
                height=80,
                key="edit_tools"
            )
            
            edited_risks = st.text_area(
                "‚ö†Ô∏è Rizik√° a probl√©my:",
                value=parsed_data.get('risks', ''),
                height=80,
                key="edit_risks"
            )
            
            edited_improvements = st.text_area(
                "üöÄ Mo≈ænosti zlep≈°enia:",
                value=parsed_data.get('improvements', ''),
                height=80,
                key="edit_improvements"
            )
            
            # Tlaƒçidl√° formul√°ra
            st.markdown("---")
            col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
            
            with col1:
                save_edited = st.form_submit_button("üíæ Ulo≈æi≈• upraven√©", type="primary")
            
            with col2:
                apply_changes = st.form_submit_button("‚úÖ Aplikova≈• zmeny")
            
            with col3:
                go_to_guide = st.form_submit_button("üìù Pokraƒçova≈• v sprievodcovi")
            
            with col4:
                discard_all = st.form_submit_button("üóëÔ∏è Zahodi≈•")
        
        # Spracovanie formul√°ra
        if save_edited:
            # Ulo≈æ upraven√© d√°ta priamo
            final_data = {
                'name': edited_name,
                'category': edited_category,
                'description': edited_description,
                'owner': edited_owner,
                'steps': edited_steps,
                'step_details': edited_step_details,
                'frequency': edited_frequency,
                'duration_minutes': edited_duration,
                'priority': edited_priority,
                'tools': edited_tools,
                'risks': edited_risks,
                'automation_readiness': edited_automation,
                'improvements': edited_improvements
            }
            
            # Ulo≈æenie do datab√°zy
            try:
                save_process_to_db(final_data)
                # NEPREHOƒé NA IN√ö STR√ÅNKU - ZOSTA≈§ TU A UK√ÅZA≈§ SUCCESS
                del st.session_state.bulk_parsed_data
                st.success("‚úÖ Proces √∫spe≈°ne ulo≈æen√Ω s √∫pravami!")
                st.info("üìã Proces bol pridan√Ω do datab√°zy. M√¥≈æete vytvori≈• ƒèal≈°√≠ proces alebo prejs≈• na spr√°vu procesov.")
                
                # Pridaj tlaƒçidl√° na navig√°ciu
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button("‚ûï Vytvori≈• ƒèal≈°√≠ proces", type="primary"):
                        # Vyƒçisti d√°ta a zosta≈Ñ v learning mode
                        if 'current_process_data' in st.session_state:
                            del st.session_state.current_process_data
                        if 'process_learning_step' in st.session_state:
                            del st.session_state.process_learning_step
                        st.rerun()
                
                with col2:
                    if st.button("üìã Spr√°va procesov"):
                        st.session_state.mode = "processes"
                        st.rerun()
                
                with col3:
                    if st.button("üè† Domov"):
                        st.session_state.mode = "home"
                        st.rerun()
                
                # NEPOU≈Ω√çVAJ st.rerun() tu - nech sa zobraz√≠ success hlaska
                return
                
            except Exception as e:
                st.error(f"‚ùå Chyba ukladania: {e}")
                return
        
        elif apply_changes:
            # Aplikuj zmeny do parsed_data a zobrazi≈• aktualizovan√©
            st.session_state.bulk_parsed_data = {
                'name': edited_name,
                'category': edited_category,
                'description': edited_description,
                'owner': edited_owner,
                'steps': edited_steps,
                'step_details': edited_step_details,
                'frequency': edited_frequency,
                'duration_minutes': str(edited_duration),
                'priority': str(edited_priority),
                'tools': edited_tools,
                'risks': edited_risks,
                'automation_readiness': str(edited_automation),
                'improvements': edited_improvements
            }
            st.success("‚úÖ Zmeny aplikovan√©! Skontrolujte v√Ωsledok ni≈æ≈°ie.")
            st.rerun()
        
        elif go_to_guide:
            # Presun do postupn√©ho sprievodcu s upraven√Ωmi d√°tami
            final_data = {
                'name': edited_name,
                'category': edited_category,
                'description': edited_description,
                'owner': edited_owner,
                'steps': edited_steps,
                'step_details': edited_step_details,
                'frequency': edited_frequency,
                'duration_minutes': str(edited_duration),
                'priority': str(edited_priority),
                'tools': edited_tools,
                'risks': edited_risks,
                'automation_readiness': str(edited_automation),
                'improvements': edited_improvements
            }
            st.session_state.current_process_data = final_data
            st.session_state.process_learning_step = 0
            del st.session_state.bulk_parsed_data
            st.session_state.switch_to_step_by_step = True
            st.rerun()
        
        elif discard_all:
            del st.session_state.bulk_parsed_data
            st.rerun()

def parse_chatgpt_conversation(conversation: str) -> dict:
    """Parsuje ChatGPT konverz√°ciu a extraktuje d√°ta o procese"""
    try:
        from ai_components import RealAIReasoningEngine
        ai_engine = RealAIReasoningEngine()
        
        if not ai_engine.ai_available:
            st.warning("‚ö†Ô∏è AI nie je dostupn√© - zadajte OpenAI API kƒæ√∫ƒç")
            return {}
        
        system_prompt = """
Si expert na parsovanie konverz√°ci√≠ o business procesoch. 
Tvoja √∫loha je extrahova≈• ≈°trukt√∫rovan√© d√°ta z ChatGPT konverz√°cie.

V√ùSTUP MUS√ç BY≈§ VALID JSON s t√Ωmito poƒæami (v≈°etky s√∫ string okrem ƒç√≠seln√Ωch):
{
    "name": "n√°zov procesu",
    "category": "kateg√≥ria/oddelenie", 
    "description": "popis procesu",
    "owner": "vlastn√≠k procesu",
    "steps": "hlavn√© kroky ako zoznam - len n√°zvy (1. Krok1\\n2. Krok2)",
    "step_details": "detailn√Ω popis ka≈æd√©ho kroku (1. Krok1: detailn√Ω popis...\\n2. Krok2: detailn√Ω popis...)",
    "frequency": "frekvencia vykon√°vania",
    "duration_minutes": "ƒç√≠slo - poƒçet min√∫t",
    "priority": "ƒç√≠slo 1-10",
    "tools": "n√°stroje a syst√©my",
    "risks": "rizik√° a probl√©my", 
    "automation_readiness": "ƒç√≠slo 1-5",
    "improvements": "mo≈ænosti zlep≈°enia"
}

Ak niektor√© pole nen√°jde≈°, nastav ho na pr√°zdny string "".
ƒå√≠sla vr√°≈• ako stringy obsahuj√∫ce len ƒç√≠slice.
Vr√°≈• V√ùLUƒåNE JSON bez ak√Ωchkoƒævek dodatoƒçn√Ωch textov.
"""
        
        user_prompt = f"""
Parsuj t√∫to ChatGPT konverz√°ciu a extraktuj d√°ta o procese:

{conversation}

Vr√°≈• VALID JSON s extraktovan√Ωmi d√°tami.
"""
        
        if ai_engine.use_new_client:
            response = ai_engine.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1000,
                temperature=0.1
            )
            result = response.choices[0].message.content.strip()
        else:
            import openai
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1000,
                temperature=0.1
            )
            result = response.choices[0].message.content.strip()
        
        # Parsuj JSON
        import json
        import re
        
        # Oƒçisti JSON (odstr√°≈à markdown bloky ak existuj√∫)
        json_match = re.search(r'```(?:json)?\s*(\{.*?\})\s*```', result, re.DOTALL)
        if json_match:
            result = json_match.group(1)
        
        # Parsuj JSON
        parsed_data = json.loads(result)
        
        # Valid√°cia a ƒçistenie d√°t
        cleaned_data = {}
        for key, value in parsed_data.items():
            if isinstance(value, str):
                cleaned_data[key] = value.strip()
            else:
                cleaned_data[key] = str(value).strip() if value else ""
        
        return cleaned_data
        
    except Exception as e:
        st.error(f"‚ùå Chyba parsovania: {e}")
        return {}

def load_existing_categories() -> List[str]:
    """Naƒç√≠ta existuj√∫ce kateg√≥rie z datab√°zy"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            cursor = conn.execute("SELECT DISTINCT category FROM processes WHERE category IS NOT NULL AND category != '' ORDER BY category")
            categories = [row[0] for row in cursor.fetchall() if row[0]]
            return categories
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania kateg√≥ri√≠: {e}")
        return []

def get_process_ai_suggestion(field: Dict, current_data: Dict) -> str:
    """Z√≠ska AI n√°vrh pre pole procesu"""
    try:
        from ai_components import RealAIReasoningEngine
        ai_engine = RealAIReasoningEngine()
        
        if not ai_engine.ai_available:
            st.warning("‚ö†Ô∏è AI nie je dostupn√© - zadajte OpenAI API kƒæ√∫ƒç")
            return ""
        
        # Vytvor prompt na z√°klade aktu√°lnych d√°t
        prompt = field['ai_prompt'].format(**current_data)
        
        # ≈†peci√°lne spracovanie pre category - pridaj existuj√∫ce kateg√≥rie
        additional_context = ""
        if field['key'] == 'category':
            existing_categories = load_existing_categories()
            if existing_categories:
                additional_context = f"\nExistuj√∫ce kateg√≥rie v datab√°ze: {', '.join(existing_categories)}"
        
        system_prompt = f"""
Si expert na business procesy a procesn√© riadenie.
Proces: {current_data.get('name', 'proces')}
Kateg√≥ria: {current_data.get('category', 'v≈°eobecn√°')}{additional_context}

Nap√≠≈° detailn√∫, u≈æitoƒçn√∫ odpoveƒè v slovenƒçine. Buƒè konkr√©tny a zachovaj v≈°etky d√¥le≈æit√© inform√°cie.
"""
        
        if ai_engine.use_new_client:
            response = ai_engine.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.4
            )
            return response.choices[0].message.content.strip()
        else:
            import openai
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.4
            )
            return response.choices[0].message.content.strip()
            
    except Exception as e:
        st.error(f"‚ùå Chyba AI n√°vrhu: {e}")
        return ""

def save_process_to_db(process_data: Dict):
    """Ulo≈æ√≠ proces do datab√°zy"""
    try:
        # DEBUG INFO
        print(f"üîç save_process_to_db called with data: {process_data}")
        
        with sqlite3.connect("adsun_processes.db") as conn:
            # Pridaj nov√© stƒ∫pce ak neexistuj√∫
            try:
                conn.execute("ALTER TABLE processes ADD COLUMN description TEXT")
            except sqlite3.OperationalError:
                pass  # Stƒ∫pec u≈æ existuje
            
            try:
                conn.execute("ALTER TABLE processes ADD COLUMN steps TEXT")
            except sqlite3.OperationalError:
                pass
            
            try:
                conn.execute("ALTER TABLE processes ADD COLUMN tools TEXT")
            except sqlite3.OperationalError:
                pass
            
            try:
                conn.execute("ALTER TABLE processes ADD COLUMN risks TEXT")
            except sqlite3.OperationalError:
                pass
            
            try:
                conn.execute("ALTER TABLE processes ADD COLUMN improvements TEXT")
            except sqlite3.OperationalError:
                pass
            
            try:
                conn.execute("ALTER TABLE processes ADD COLUMN step_details TEXT")
            except sqlite3.OperationalError:
                pass  # Stƒ∫pec u≈æ existuje
            
            # HLAVN√ù INSERT
            insert_query = """
                INSERT INTO processes (
                    name, category, description, owner, steps, step_details, frequency, 
                    duration_minutes, priority, tools, risks, automation_readiness, 
                    improvements, trigger_type, success_criteria, common_problems, 
                    is_active, created_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1, datetime('now'))
            """
            
            insert_values = (
                process_data.get('name', ''),
                process_data.get('category', 'nezhodnoten√©'),
                process_data.get('description', ''),
                process_data.get('owner', ''),
                process_data.get('steps', ''),
                process_data.get('step_details', ''),  # Nov√Ω stƒ∫pec
                process_data.get('frequency', 'nezhodnoten√©'),
                int(process_data.get('duration_minutes', 0)),
                int(process_data.get('priority', 0)),
                process_data.get('tools', ''),
                process_data.get('risks', ''),
                int(process_data.get('automation_readiness', 0)),
                process_data.get('improvements', ''),
                'manu√°lny proces',  # trigger_type - DEFAULT hodnota
                'dokonƒçenie √∫loh',  # success_criteria - DEFAULT hodnota  
                '≈æiadne zn√°me probl√©my'  # common_problems - DEFAULT hodnota
            )
            
            # DEBUG INFO
            print(f"üîç INSERT VALUES: {insert_values}")
            
            cursor = conn.execute(insert_query, insert_values)
            process_id = cursor.lastrowid
            conn.commit()
            
            print(f"‚úÖ Proces ulo≈æen√Ω s ID: {process_id}")
            
            # OVERENIE - naƒç√≠taj sp√§≈• z DB
            verify_cursor = conn.execute("SELECT name FROM processes WHERE id = ?", (process_id,))
            saved_name = verify_cursor.fetchone()
            print(f"üîç OVERENIE: Ulo≈æen√Ω proces m√° n√°zov: {saved_name[0] if saved_name else 'NENA≈†IEL SA!'}")
            
    except Exception as e:
        error_msg = f"‚ùå Chyba ukladania procesu: {e}"
        print(error_msg)
        st.error(error_msg)
        raise e  # Re-raise pre debug 