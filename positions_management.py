#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ADSUN Positions Management
Spr√°va poz√≠ci√≠ s AI-driven vytv√°ran√≠m a automatick√Ωm dopƒ∫≈àan√≠m
"""

import streamlit as st
import sqlite3
import json
from datetime import datetime
from typing import Dict, List, Optional
from ai_components import RealAIReasoningEngine
from ui_components import render_section_header, render_action_buttons, render_modern_dataframe

def load_existing_departments() -> List[str]:
    """Naƒç√≠ta existuj√∫ce oddelenia z datab√°zy"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            
            # Pok√∫s sa naƒç√≠ta≈• z departments tabuƒæky
            try:
                cursor = conn.execute("SELECT DISTINCT name FROM departments ORDER BY name")
                departments = [row[0] for row in cursor.fetchall() if row[0]]
                if departments:
                    return departments
            except sqlite3.OperationalError:
                pass  # Tabuƒæka departments neexistuje
            
            # Fallback - naƒç√≠taj z positions tabuƒæky
            try:
                cursor = conn.execute("SELECT DISTINCT department FROM positions WHERE department IS NOT NULL AND department != '' ORDER BY department")
                departments = [row[0] for row in cursor.fetchall() if row[0]]
                return departments
            except sqlite3.OperationalError:
                return []  # Ani positions tabuƒæka neexistuje
                
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania oddelen√≠: {e}")
        return []

def render_positions():
    """Render spr√°vy poz√≠ci√≠"""
    
    # Naƒç√≠tanie poz√≠ci√≠ z datab√°zy
    positions = load_positions_from_db()
    
    # Modern√Ω header so ≈°tatistikami
    departments = list(set(pos.get('department', 'Neurƒçen√©') for pos in positions))
    levels = list(set(pos.get('level', 'Neurƒçen√©') for pos in positions))
    
    stats = {
        "positions": {"icon": "üë•", "text": f"{len(positions)} poz√≠ci√≠"},
        "departments": {"icon": "üè¢", "text": f"{len(departments)} oddelen√≠"},
        "levels": {"icon": "üìä", "text": f"{len(levels)} √∫rovn√≠"}
    }
    
    render_section_header(
        title="Poz√≠cie",
        subtitle="Spr√°va firemn√Ωch poz√≠ci√≠ s AI asistentom pre dopƒ∫≈àanie",
        icon="üë•",
        stats=stats
    )
    
    # DETAILY MIMO EXPANDERA - AK S√ö ZOBRAZEN√â
    if 'show_position_details' in st.session_state:
        position_id = st.session_state.show_position_details
        st.markdown("---")
        show_position_details(position_id)
        
        if st.button("‚ùå Zavrie≈• detaily", type="secondary"):
            del st.session_state.show_position_details
            st.rerun()
        
        st.markdown("---")
    
    # ZODPOVEDNOSTI MIMO EXPANDERA - AK S√ö ZOBRAZEN√â
    if 'show_position_responsibilities' in st.session_state:
        position_id = st.session_state.show_position_responsibilities
        st.markdown("---")
        show_position_responsibilities(position_id)
        
        if st.button("‚ùå Zavrie≈• zodpovednosti", type="secondary"):
            del st.session_state.show_position_responsibilities
            st.rerun()
        
        st.markdown("---")
    
    # Pridanie novej poz√≠cie
    with st.expander("‚ûï Prida≈• nov√∫ poz√≠ciu"):
        if st.session_state.get('position_learning_mode', False):
            render_position_learning()
        else:
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.markdown("**ü§ñ AI v√°s povedie ot√°zkami pre vytvorenie poz√≠cie**")
                st.info("AI polo≈æ√≠ ot√°zky a pom√¥≈æe vyplni≈• ≈°tandardn√© inform√°cie o poz√≠cii.")
            
            with col2:
                if st.button("üöÄ Zaƒça≈• s AI", type="primary", key="start_position_ai"):
                    st.session_state.position_learning_mode = True
                    st.session_state.position_learning_step = 0
                    st.session_state.position_learning_history = []
                    st.session_state.current_position_data = {}
                    st.rerun()
    
    # Zobrazenie existuj√∫cich poz√≠ci√≠
    if not positions:
        st.info("üë• ≈Ωiadne poz√≠cie e≈°te nie s√∫ definovan√©")
        return
    
    # Modern√© zobrazenie poz√≠ci√≠ v jednotnom ≈°t√Ωle
    st.markdown("### üë• Prehƒæad poz√≠ci√≠")
    
    # Pou≈æijeme jednotn√Ω ≈°t√Ωl pre v≈°etky poz√≠cie (ako departments a processes)
    for pos in positions:
        with st.expander(f"üë§ {pos['name']}", expanded=False):
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                # Z√°kladn√© info v jednotnom ≈°t√Ωle
                st.write(f"**üìù Popis:** {pos.get('description', 'Bez popisu')[:100]}{'...' if len(pos.get('description', '')) > 100 else ''}")
                st.write(f"**üè¢ Oddelenie:** {pos.get('department', 'Neurƒçen√©')}")
                st.write(f"**üìä √örove≈à:** {pos.get('level', 'Neurƒçen√©')}")
                st.write(f"**‚è∞ Pracovn√Ω ƒças:** {pos.get('work_time', 'Neurƒçen√©')}")
                
                if pos.get('requirements'):
                    st.write(f"**üìã Po≈æiadavky:** {pos.get('requirements', '')[:100]}{'...' if len(pos.get('requirements', '')) > 100 else ''}")
            
            with col2:
                # TLAƒåIDL√Å DETAILY A ZODPOVEDNOSTI TERAZ ZOBRAZUJ√ö MIMO EXPANDERA
                if st.button("üìã Detaily", key=f"pos_details_{pos['id']}", use_container_width=True):
                    st.session_state.show_position_details = pos['id']
                    st.rerun()
                
                if st.button("üìä Zodpovednosti", key=f"responsibilities_{pos['id']}", use_container_width=True):
                    st.session_state.show_position_responsibilities = pos['id']
                    st.rerun()
            
            with col3:
                if st.button("‚úèÔ∏è Upravi≈•", key=f"edit_pos_{pos['id']}", use_container_width=True):
                    st.session_state.edit_position_id = pos['id']
                    st.session_state.mode = "edit_position"
                    st.rerun()
                
                if st.button("üóëÔ∏è Zmaza≈•", key=f"delete_pos_{pos['id']}", use_container_width=True):
                    st.warning(f"‚ö†Ô∏è Zmazanie poz√≠cie {pos['name']} - funkcia bude dostupn√° v ƒèal≈°ej verzii")

def load_positions_from_db() -> List[Dict]:
    """Naƒç√≠ta poz√≠cie z datab√°zy"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            
            # Vytvor tabuƒæku ak neexistuje
            conn.execute("""
                CREATE TABLE IF NOT EXISTS positions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    description TEXT,
                    department TEXT,
                    level TEXT,
                    responsibilities TEXT,
                    requirements TEXT,
                    tools_systems TEXT,
                    work_time TEXT,
                    challenges TEXT,
                    success_metrics TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            cursor = conn.execute("""
                SELECT * FROM positions 
                ORDER BY name
            """)
            return [dict(row) for row in cursor.fetchall()]
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania poz√≠ci√≠: {e}")
        return []

def show_position_details(position_id: int):
    """Zobraz√≠ detaily poz√≠cie"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("SELECT * FROM positions WHERE id = ?", (position_id,))
            position = dict(cursor.fetchone())
            
            st.markdown(f"### üë§ Detaily poz√≠cie: {position['name']}")
            
            # √öPLNE BEZ STƒπPCOV - v≈°etko pod sebou na pln√∫ ≈°√≠rku
            st.markdown("#### üìã Z√°kladn√© inform√°cie")
            
            # V≈°etko pod sebou namiesto stƒ∫pcov
            st.markdown(f"**üè¢ Oddelenie:** {position.get('department', 'Neurƒçen√©')}")
            st.markdown(f"**üìä √örove≈à zodpovednosti:** {position.get('level', 'Neurƒçen√©')}")
            st.markdown(f"**‚è∞ Pracovn√Ω ƒças:** {position.get('work_time', 'Neurƒçen√©')}")
            
            # Oddeƒæovaƒç
            st.markdown("---")
            
            # Detailn√© inform√°cie na pln√∫ ≈°√≠rku
            if position.get('description'):
                st.markdown("#### üìù √öpln√Ω popis poz√≠cie")
                st.markdown(position['description'])
                st.markdown("")
            
            if position.get('responsibilities'):
                st.markdown("#### üìã Zodpovednosti")
                st.markdown(position['responsibilities'])
                st.markdown("")
            
            if position.get('requirements'):
                st.markdown("#### ‚úÖ Po≈æiadavky") 
                st.markdown(position['requirements'])
                st.markdown("")
                
            if position.get('tools_systems'):
                st.markdown("#### üõ†Ô∏è N√°stroje a syst√©my")
                st.markdown(position['tools_systems'])
                st.markdown("")
                
            if position.get('challenges'):
                st.markdown("#### ‚ö†Ô∏è V√Ωzvy a probl√©my")
                st.markdown(position['challenges'])
                st.markdown("")
            
            if position.get('success_metrics'):
                st.markdown("#### üéØ Metriky √∫spechu")
                st.markdown(position['success_metrics'])
                st.markdown("")
                
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania detailov: {e}")

def show_position_responsibilities(position_id: int):
    """Zobraz√≠ zodpovednosti poz√≠cie"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("SELECT * FROM positions WHERE id = ?", (position_id,))
            position = dict(cursor.fetchone())
            
            st.markdown(f"### üìä Zodpovednosti: {position['name']}")
            
            # ≈†IROK√ù LAYOUT - v≈°etko na pln√∫ ≈°√≠rku bez expanders
            st.markdown("#### üìã Hlavn√© zodpovednosti a KPI")
            st.markdown("---")
                
            # Zodpovednosti na pln√∫ ≈°√≠rku
            if position.get('responsibilities'):
                st.markdown("**üìã Zoznam zodpovednost√≠:**")
                responsibilities = position['responsibilities'].split('\n')
                for i, resp in enumerate(responsibilities[:8], 1):  # Max 8
                    if resp.strip():
                        st.markdown(f"**{i}.** {resp.strip()}")
                st.markdown("")
            else:
                st.info("üìù ≈Ωiadne zadefinovan√© zodpovednosti")
            
            # Metriky √∫spechu na pln√∫ ≈°√≠rku  
            if position.get('success_metrics'):
                st.markdown("**üéØ KPI a metriky √∫spechu:**")
                metrics = position['success_metrics'].split('\n')
                for i, metric in enumerate(metrics[:8], 1):  # Max 8
                    if metric.strip():
                        st.markdown(f"**üìä {i}.** {metric.strip()}")
                st.markdown("")
            else:
                st.info("üìä ≈Ωiadne zadefinovan√© metriky")
            
            # V√Ωzvy a n√°stroje na pln√∫ ≈°√≠rku
            st.markdown("---")
            
            if position.get('challenges'):
                st.markdown("#### ‚ö†Ô∏è Hlavn√© v√Ωzvy")
                st.markdown(position['challenges'])
                st.markdown("")
            
            if position.get('tools_systems'):
                st.markdown("#### üõ†Ô∏è Pou≈æ√≠van√© n√°stroje")
                st.markdown(position['tools_systems'])
                st.markdown("")
                
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania zodpovednost√≠: {e}")

def render_position_learning():
    """AI-driven uƒçenie novej poz√≠cie s inteligentn√Ωm dopƒ∫≈àan√≠m"""
    st.markdown("### ü§ñ AI Asistent pre nov√∫ poz√≠ciu")
    st.markdown("*AI v√°m pom√¥≈æe vyplni≈• v≈°etky polia o poz√≠cii*")
    
    # KONTROLA PREPNUTIA NA STEP-BY-STEP
    if st.session_state.get('switch_to_position_step_by_step', False):
        # Vyƒçist√≠me flag a resetujeme na step-by-step
        del st.session_state.switch_to_position_step_by_step
        # Nastav√≠me default hodnotu pre radio (bude sa zobrazova≈• step-by-step)
        default_method = "üîÑ Postupn√Ω sprievodca (krok za krokom)"
    else:
        # Ak nie je flag nastaven√Ω, pou≈æijeme existuj√∫cu hodnotu alebo default
        default_method = st.session_state.get('position_creation_method', "üîÑ Postupn√Ω sprievodca (krok za krokom)")
    
    # V√ùBER SP√îSOBU VYTVORENIA POZ√çCIE
    st.markdown("#### üéØ Vyberte sp√¥sob vytvorenia poz√≠cie:")
    
    creation_method = st.radio(
        "Ako chcete vytvori≈• poz√≠ciu?",
        [
            "üîÑ Postupn√Ω sprievodca (krok za krokom)",
            "üìã Bulk import z ChatGPT konverz√°cie"
        ],
        index=0 if default_method == "üîÑ Postupn√Ω sprievodca (krok za krokom)" else 1,
        key="position_creation_method"
    )
    
    if creation_method == "üìã Bulk import z ChatGPT konverz√°cie":
        render_position_bulk_import()
        return
    
    # P√îVODN√ù POSTUPN√ù SPRIEVODCA
    st.markdown("---")
    st.markdown("**üîÑ Postupn√Ω sprievodca - krok za krokom**")
    
    # INICIALIZ√ÅCIA D√ÅT AK NEEXISTUJ√ö - MUSI BY≈§ PRED PRV√ùM PR√çSTUPOM!
    if 'current_position_data' not in st.session_state:
        st.session_state.current_position_data = {}
    
    # DEFIN√çCIA POL√ç - MUSI BY≈§ PRED PRV√ùM POU≈ΩIT√çM!
    position_fields = [
        {
            'key': 'name',
            'label': 'N√°zov poz√≠cie',
            'question': 'Ak√Ω je n√°zov novej poz√≠cie?',
            'placeholder': 'napr. Obchodn√Ω mana≈æ√©r, Program√°tor, HR mana≈æ√©r',
            'ai_prompt': 'Navrhni 3 alternat√≠vne n√°zvy pre poz√≠ciu typu {value}'
        },
        {
            'key': 'description',
            'label': 'Popis poz√≠cie',
            'question': 'Ak√Ω je struƒçn√Ω popis tejto poz√≠cie?',
            'placeholder': 'Op√≠≈°te ƒço t√°to poz√≠cia rob√≠...',
            'ai_prompt': 'Nap√≠≈° profesion√°lny popis pre poz√≠ciu {name} - ƒço rob√≠, ak√° je jej √∫loha vo firme'
        },
        {
            'key': 'department',
            'label': 'Oddelenie',
            'question': 'Do ak√©ho oddelenia patr√≠ t√°to poz√≠cia?',
            'placeholder': 'napr. Obchod, IT, HR, V√Ωroba',
            'ai_prompt': 'Na z√°klade poz√≠cie {name} a existuj√∫cich oddelen√≠ navrhni vhodn√© oddelenie. Ak je mo≈æn√©, pou≈æi existuj√∫ce oddelenie.'
        },
        {
            'key': 'level',
            'label': '√örove≈à zodpovednosti',
            'question': 'Ak√° je √∫rove≈à zodpovednosti?',
            'placeholder': 'junior, senior, mana≈æ√©r, ved√∫ci, riaditeƒæ',
            'ai_prompt': 'Navrhni √∫rove≈à zodpovednosti pre poz√≠ciu {name}'
        },
        {
            'key': 'responsibilities',
            'label': 'Zodpovednosti',
            'question': 'Ak√© s√∫ hlavn√© zodpovednosti tejto poz√≠cie?',
            'placeholder': 'Pop√≠≈°te hlavn√© √∫lohy a zodpovednosti...',
            'ai_prompt': 'Nap√≠≈° konkr√©tne zodpovednosti a √∫lohy pre poz√≠ciu {name} v {department} oddelen√≠'
        },
        {
            'key': 'requirements',
            'label': 'Po≈æiadavky',
            'question': 'Ak√© s√∫ po≈æiadavky na t√∫to poz√≠ciu?',
            'placeholder': 'Vzdelanie, sk√∫senosti, schopnosti...',
            'ai_prompt': 'Nap√≠≈° po≈æiadavky na vzdelanie, sk√∫senosti a zruƒçnosti pre poz√≠ciu {name}'
        },
        {
            'key': 'tools_systems',
            'label': 'N√°stroje/Syst√©my',
            'question': 'Ak√© n√°stroje a syst√©my bude pou≈æ√≠va≈•?',
            'placeholder': 'Software, aplik√°cie, zariadenia...',
            'ai_prompt': 'Navrhni n√°stroje, software a syst√©my potrebn√© pre poz√≠ciu {name}'
        },
        {
            'key': 'work_time',
            'label': 'Pracovn√Ω ƒças',
            'question': 'Ak√Ω je oƒçak√°van√Ω pracovn√Ω ƒças?',
            'placeholder': 'Pln√Ω √∫v√§zok, ƒçiastoƒçn√Ω, flexibiln√Ω...',
            'ai_prompt': 'Navrhni typ pracovn√©ho ƒçasu pre poz√≠ciu {name}'
        },
        {
            'key': 'challenges',
            'label': 'V√Ωzvy',
            'question': 'Ak√© s√∫ hlavn√© v√Ωzvy tejto poz√≠cie?',
            'placeholder': 'ƒåo m√¥≈æe by≈• n√°roƒçn√© alebo problematick√©...',
            'ai_prompt': 'Pop√≠≈° hlavn√© v√Ωzvy a probl√©my pre poz√≠ciu {name}'
        },
        {
            'key': 'success_metrics',
            'label': 'Meranie √∫spechu',
            'question': 'Ako sa bude mera≈• √∫spech na tejto poz√≠cii?',
            'placeholder': 'KPI, ciele, oƒçak√°van√© v√Ωsledky...',
            'ai_prompt': 'Navrhni KPI a metriky √∫spechu pre poz√≠ciu {name}'
        }
    ]
    
    # KONTROLA PREDVYPLNEN√ùCH D√ÅT
    if st.session_state.current_position_data:
        filled_fields = sum(1 for field in position_fields if st.session_state.current_position_data.get(field['key']))
        total_fields = len(position_fields)
        
        # PROGRESS BAR
        progress = filled_fields / total_fields
        st.progress(progress, text=f"üìä Pokrok: {filled_fields}/{total_fields} pol√≠ vyplnen√Ωch ({progress:.0%})")
        
        st.info(f"üìã **Predvyplnen√© d√°ta:** {filled_fields}/{total_fields} pol√≠ u≈æ vyplnen√Ωch z bulk importu")
        
        # Mo≈ænos≈• preskoƒçi≈• na nevyplnen√© polia
        if filled_fields < total_fields:
            col1, col2 = st.columns([2, 1])
            with col1:
                st.markdown("üí° *M√¥≈æete zaƒça≈• od prv√©ho nevyplnen√©ho poƒæa alebo prech√°dza≈• postupne*")
            with col2:
                if st.button("‚è≠Ô∏è Preskoƒç na nevyplnen√©"):
                    # N√°jdi prv√Ω nevyplnen√Ω krok
                    for i, field in enumerate(position_fields):
                        if not st.session_state.current_position_data.get(field['key']):
                            st.session_state.position_learning_step = i
                            st.rerun()
                            break
        else:
            st.success("üéâ **V≈°etky polia s√∫ vyplnen√©!** M√¥≈æete pokraƒçova≈• na fin√°lny prehƒæad")
            if st.button("üèÅ Prejs≈• na fin√°lny prehƒæad"):
                st.session_state.position_learning_step = len(position_fields)
                st.rerun()
        
        # Zobrazenie prehƒæadu predvyplnen√Ωch d√°t
        with st.expander("üëÄ Zobrazi≈• v≈°etky predvyplnen√© d√°ta"):
            for field in position_fields:
                value = st.session_state.current_position_data.get(field['key'], '')
                if value:
                    st.markdown(f"‚úÖ **{field['label']}:** {value[:100]}{'...' if len(str(value)) > 100 else ''}")
                else:
                    st.markdown(f"‚≠ï **{field['label']}:** *Nevyplnen√©*")
    
    # Polia pre poz√≠ciu
    current_step = st.session_state.get('position_learning_step', 0)
    
    if current_step < len(position_fields):
        field = position_fields[current_step]
        
        # VYLEP≈†EN√ù HEADER S INDIK√ÅTOROM STAVU
        is_field_filled = bool(st.session_state.current_position_data.get(field['key']))
        status_icon = "‚úÖ" if is_field_filled else "‚≠ï"
        status_text = "u≈æ vyplnen√©" if is_field_filled else "nevyplnen√©"
        
        st.markdown(f"### üéØ Krok {current_step + 1}/{len(position_fields)}: {status_icon} {field['label']}")
        
        if is_field_filled:
            st.success(f"üí° **Toto pole je {status_text}** z bulk importu - m√¥≈æete hodnotu upravi≈• alebo ponecha≈•")
        else:
            st.info(f"üìù **Toto pole je {status_text}** - zadajte nov√∫ hodnotu alebo pou≈æite AI pomoc")
        
        # ≈†peci√°lne spracovanie pre oddelenie - uk√°≈æ existuj√∫ce oddelenia
        if field['key'] == 'department':
            existing_departments = load_existing_departments()
            if existing_departments:
                st.info(f"üè¢ **Existuj√∫ce oddelenia:** {', '.join(existing_departments)}")
                st.markdown(f"**Ot√°zka:** Do ak√©ho oddelenia patr√≠ t√°to poz√≠cia? M√¥≈æete vybra≈• existuj√∫ce alebo zada≈• nov√©.")
            else:
                st.info(field['question'])
        else:
            st.info(field['question'])
        
        # Hlavn√© pole pre input
        col1, col2 = st.columns([3, 1])
        
        with col1:
            # ≈†peci√°lne spracovanie pre department - selectbox + mo≈ænos≈• vlastn√©ho
            if field['key'] == 'department':
                existing_departments = load_existing_departments()
                current_value = st.session_state.current_position_data.get(field['key'], '')
                
                if existing_departments:
                    # Ak existuj√∫ oddelenia, pon√∫kni v√Ωber
                    options = ["-- Vybra≈• existuj√∫ce --"] + existing_departments + ["-- Zada≈• nov√© --"]
                    
                    if current_value and current_value in existing_departments:
                        index = existing_departments.index(current_value) + 1
                    elif current_value:
                        index = len(options) - 1  # "Zada≈• nov√©"
                    else:
                        index = 0
                    
                    selection = st.selectbox(
                        "üè¢ Vyberte oddelenie:",
                        options,
                        index=index,
                        key=f"dept_select_{field['key']}"
                    )
                    
                    if selection == "-- Zada≈• nov√© --" or (selection == "-- Vybra≈• existuj√∫ce --" and current_value):
                        user_input = st.text_input(
                            "‚úçÔ∏è N√°zov nov√©ho oddelenia:",
                            value=current_value if selection == "-- Zada≈• nov√© --" else "",
                            placeholder=field['placeholder'],
                            key=f"field_{field['key']}"
                        )
                    elif selection != "-- Vybra≈• existuj√∫ce --":
                        user_input = selection
                        st.session_state.current_position_data[field['key']] = selection
                    else:
                        user_input = current_value
                else:
                    # ≈Ωiadne existuj√∫ce oddelenia - klasick√Ω input
                    user_input = st.text_input(
                        "‚úçÔ∏è Va≈°a odpoveƒè:",
                        value=current_value,
                        placeholder=field['placeholder'],
                        key=f"field_{field['key']}"
                    )
            elif field['key'] in ['description', 'responsibilities', 'requirements', 'challenges', 'success_metrics']:
                user_input = st.text_area(
                    "‚úçÔ∏è Va≈°a odpoveƒè:",
                    value=st.session_state.current_position_data.get(field['key'], ''),
                    placeholder=field['placeholder'],
                    height=100,
                    key=f"field_{field['key']}"
                )
            else:
                user_input = st.text_input(
                    "‚úçÔ∏è Va≈°a odpoveƒè:",
                    value=st.session_state.current_position_data.get(field['key'], ''),
                    placeholder=field['placeholder'],
                    key=f"field_{field['key']}"
                )
        
        with col2:
            st.markdown("**ü§ñ AI Pomoc**")
            if st.button("‚ú® AI Doplni≈•", key=f"ai_help_{field['key']}"):
                ai_suggestion = get_ai_suggestion(field, st.session_state.current_position_data)
                if ai_suggestion:
                    st.session_state.current_position_data[field['key']] = ai_suggestion
                    st.rerun()
        
        # AI n√°vrh ak existuje
        if f"ai_suggestion_{field['key']}" in st.session_state:
            st.success(f"ü§ñ AI n√°vrh: {st.session_state[f'ai_suggestion_{field['key']}']}")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ Pou≈æi≈• AI n√°vrh", key=f"use_ai_{field['key']}"):
                    st.session_state.current_position_data[field['key']] = st.session_state[f'ai_suggestion_{field['key']}']
                    del st.session_state[f'ai_suggestion_{field['key']}']
                    st.rerun()
            with col2:
                if st.button("‚ùå Zamietnu≈•", key=f"reject_ai_{field['key']}"):
                    del st.session_state[f'ai_suggestion_{field['key']}']
                    st.rerun()
        
        # Navigaƒçn√© tlaƒçidl√°
        col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
        
        with col1:
            if st.button("‚¨ÖÔ∏è Sp√§≈•") and current_step > 0:
                st.session_state.current_position_data[field['key']] = user_input
                st.session_state.position_learning_step = current_step - 1
                st.rerun()
        
        with col2:
            if st.button("‚û°Ô∏è ƒéalej"):
                st.session_state.current_position_data[field['key']] = user_input
                st.session_state.position_learning_step = current_step + 1
                st.rerun()
        
        with col3:
            if st.button("üíæ Ulo≈æi≈• poz√≠ciu") and st.session_state.current_position_data.get('name'):
                st.session_state.current_position_data[field['key']] = user_input
                save_position_to_db(st.session_state.current_position_data)
                st.session_state.position_learning_mode = False
                st.success("‚úÖ Poz√≠cia ulo≈æen√°!")
                st.rerun()
        
        with col4:
            if st.button("‚ùå Zru≈°i≈•"):
                st.session_state.position_learning_mode = False
                st.rerun()
        
        # Aktualizuj d√°ta
        st.session_state.current_position_data[field['key']] = user_input
        
    else:
        # V≈°etky polia vyplnen√© - fin√°lny prehƒæad
        st.success("üéâ V≈°etky polia vyplnen√©!")
        st.markdown("### üìã Prehƒæad poz√≠cie:")
        
        for field in position_fields:
            value = st.session_state.current_position_data.get(field['key'], '')
            if value:
                st.markdown(f"**{field['label']}:** {value}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üíæ Ulo≈æi≈• poz√≠ciu", type="primary"):
                save_position_to_db(st.session_state.current_position_data)
                st.session_state.position_learning_mode = False
                st.success("‚úÖ Poz√≠cia vytvoren√°!")
                st.rerun()
        
        with col2:
            if st.button("üìù Upravi≈•"):
                st.session_state.position_learning_step = 0
                st.rerun()

def render_position_bulk_import():
    """Bulk import poz√≠cie z ChatGPT konverz√°cie"""
    st.markdown("### üìã Bulk Import poz√≠cie z ChatGPT konverz√°cie")
    st.markdown("**üí° N√°vod:** Skop√≠rujte cel√∫ konverz√°ciu z ChatGPT kde ste diskutovali o poz√≠cii a AI automaticky vypln√≠ v≈°etky polia.")
    
    # Pr√≠klad form√°tu
    with st.expander("üìñ Pr√≠klad ChatGPT konverz√°cie pre poz√≠ciu"):
        st.markdown("""
**Pr√≠klad spr√°vneho form√°tu:**

```
Pou≈æ√≠vateƒæ: Potrebujem vytvori≈• poz√≠ciu senior program√°tora pre n√°≈° IT t√≠m

ChatGPT: Poz√≠cia senior program√°tora je kƒæ√∫ƒçov√° pre IT t√≠m. M√¥≈æem v√°m pom√¥c≈• ju navrhn√∫≈•:

**N√°zov poz√≠cie:** Senior Software Developer
**Oddelenie:** IT
**√örove≈à:** Senior
**Popis:** V√Ωvoj a √∫dr≈æba softv√©rov√Ωch aplik√°ci√≠, vedenie men≈°√≠ch projektov

**Zodpovednosti:**
- Navrhovanie a implement√°cia softv√©rov√Ωch rie≈°en√≠
- Code review pre junior v√Ωvoj√°rov
- Vedenie technick√Ωch diskusi√≠
- Optimaliz√°cia v√Ωkonu aplik√°ci√≠

**Po≈æiadavky:** 
- Bakal√°rske vzdelanie v IT
- 5+ rokov sk√∫senost√≠ s programovan√≠m
- Znalos≈• Java, Python, SQL

**N√°stroje:** IntelliJ IDEA, Git, Docker, Jenkins
**Pracovn√Ω ƒças:** Pln√Ω √∫v√§zok, mo≈ænos≈• home office
**V√Ωzvy:** R√Ωchly technologick√Ω v√Ωvoj, deadlines
**KPI:** Poƒçet dokonƒçen√Ωch projektov, kvalita k√≥du, mentoring
```
        """)
    
    # Vstupn√© pole pre konverz√°ciu
    conversation_text = st.text_area(
        "üìù Vlo≈æte ChatGPT konverz√°ciu o poz√≠cii:",
        height=400,
        placeholder="Skop√≠rujte sem cel√∫ konverz√°ciu z ChatGPT...",
        key="position_bulk_conversation_input"
    )
    
    # Tlaƒçidl√°
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if st.button("üöÄ Spracova≈• AI", type="primary", disabled=not conversation_text.strip()):
            with st.spinner("ü§ñ AI parsuje konverz√°ciu o poz√≠cii..."):
                parsed_data = parse_position_chatgpt_conversation(conversation_text)
                if parsed_data:
                    st.session_state.position_bulk_parsed_data = parsed_data
                    st.rerun()
                else:
                    st.error("‚ùå AI nedok√°zalo parsova≈• konverz√°ciu. Sk√∫ste in√Ω form√°t.")
    
    with col2:
        if st.button("üîÑ Prepn√∫≈• na sprievodcu"):
            st.session_state.switch_to_position_step_by_step = True
            st.rerun()
    
    with col3:
        if st.button("‚ùå Zru≈°i≈•"):
            st.session_state.position_learning_mode = False
            st.rerun()
    
    # Zobrazenie parsovan√Ωch d√°t
    if 'position_bulk_parsed_data' in st.session_state:
        parsed_data = st.session_state.position_bulk_parsed_data
        
        st.markdown("---")
        st.success("‚úÖ AI √∫spe≈°ne parsovalo konverz√°ciu o poz√≠cii!")
        st.markdown("### üìã Extraktovan√© d√°ta poz√≠cie:")
        st.info("üí° **M√¥≈æete upravi≈• ƒæubovoƒæn√© pole pred ulo≈æen√≠m**")
        
        # EDITOVATEƒΩN√Å FORMA PRE V≈†ETKY POLIA
        with st.form("edit_position_bulk_data_form"):
            st.markdown("#### ‚úèÔ∏è Upravte parsovan√© d√°ta poz√≠cie:")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üìä Z√°kladn√© inform√°cie**")
                
                edited_name = st.text_input(
                    "üë§ N√°zov poz√≠cie:",
                    value=parsed_data.get('name', ''),
                    key="edit_pos_name"
                )
                
                edited_department = st.text_input(
                    "üè¢ Oddelenie:",
                    value=parsed_data.get('department', ''),
                    key="edit_pos_department"
                )
                
                edited_level = st.text_input(
                    "üìä √örove≈à:",
                    value=parsed_data.get('level', ''),
                    key="edit_pos_level"
                )
                
                edited_work_time = st.text_input(
                    "‚è∞ Pracovn√Ω ƒças:",
                    value=parsed_data.get('work_time', ''),
                    key="edit_pos_work_time"
                )
            
            with col2:
                st.markdown("**üìù Popis poz√≠cie**")
                
                edited_description = st.text_area(
                    "üìñ Popis poz√≠cie:",
                    value=parsed_data.get('description', ''),
                    height=120,
                    key="edit_pos_description"
                )
            
            # Dlh√© texty na pln√∫ ≈°√≠rku
            st.markdown("**üìù Detailn√© inform√°cie**")
            
            edited_responsibilities = st.text_area(
                "üìã Zodpovednosti:",
                value=parsed_data.get('responsibilities', ''),
                height=120,
                key="edit_pos_responsibilities"
            )
            
            edited_requirements = st.text_area(
                "‚úÖ Po≈æiadavky:",
                value=parsed_data.get('requirements', ''),
                height=100,
                key="edit_pos_requirements"
            )
            
            edited_tools = st.text_area(
                "üõ†Ô∏è N√°stroje a syst√©my:",
                value=parsed_data.get('tools_systems', ''),
                height=80,
                key="edit_pos_tools"
            )
            
            edited_challenges = st.text_area(
                "‚ö†Ô∏è V√Ωzvy:",
                value=parsed_data.get('challenges', ''),
                height=80,
                key="edit_pos_challenges"
            )
            
            edited_success_metrics = st.text_area(
                "üéØ Metriky √∫spechu:",
                value=parsed_data.get('success_metrics', ''),
                height=80,
                key="edit_pos_success_metrics"
            )
            
            # Tlaƒçidl√° formul√°ra
            st.markdown("---")
            col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
            
            with col1:
                save_edited = st.form_submit_button("üíæ Ulo≈æi≈• upraven√©", type="primary")
            
            with col2:
                apply_changes = st.form_submit_button("‚úÖ Aplikova≈• zmeny")
            
            with col3:
                go_to_guide = st.form_submit_button("üìù Pokraƒçova≈• v sprievodcovi")
            
            with col4:
                discard_all = st.form_submit_button("üóëÔ∏è Zahodi≈•")
        
        # Spracovanie formul√°ra
        if save_edited:
            # Ulo≈æ upraven√© d√°ta priamo
            final_data = {
                'name': edited_name,
                'description': edited_description,
                'department': edited_department,
                'level': edited_level,
                'responsibilities': edited_responsibilities,
                'requirements': edited_requirements,
                'tools_systems': edited_tools,
                'work_time': edited_work_time,
                'challenges': edited_challenges,
                'success_metrics': edited_success_metrics
            }
            save_position_to_db(final_data)
            del st.session_state.position_bulk_parsed_data
            st.session_state.position_learning_mode = False
            st.success("‚úÖ Poz√≠cia ulo≈æen√° s √∫pravami!")
            st.rerun()
        
        elif apply_changes:
            # Aplikuj zmeny do parsed_data a zobrazi≈• aktualizovan√©
            st.session_state.position_bulk_parsed_data = {
                'name': edited_name,
                'description': edited_description,
                'department': edited_department,
                'level': edited_level,
                'responsibilities': edited_responsibilities,
                'requirements': edited_requirements,
                'tools_systems': edited_tools,
                'work_time': edited_work_time,
                'challenges': edited_challenges,
                'success_metrics': edited_success_metrics
            }
            st.success("‚úÖ Zmeny aplikovan√©! Skontrolujte v√Ωsledok ni≈æ≈°ie.")
            st.rerun()
        
        elif go_to_guide:
            # Presun do postupn√©ho sprievodcu s upraven√Ωmi d√°tami
            final_data = {
                'name': edited_name,
                'description': edited_description,
                'department': edited_department,
                'level': edited_level,
                'responsibilities': edited_responsibilities,
                'requirements': edited_requirements,
                'tools_systems': edited_tools,
                'work_time': edited_work_time,
                'challenges': edited_challenges,
                'success_metrics': edited_success_metrics
            }
            st.session_state.current_position_data = final_data
            st.session_state.position_learning_step = 0
            del st.session_state.position_bulk_parsed_data
            st.session_state.switch_to_position_step_by_step = True
            st.rerun()
        
        elif discard_all:
            del st.session_state.position_bulk_parsed_data
            st.rerun()

def parse_position_chatgpt_conversation(conversation: str) -> dict:
    """Parsuje ChatGPT konverz√°ciu a extraktuje d√°ta o poz√≠cii"""
    try:
        ai_engine = RealAIReasoningEngine()
        
        if not ai_engine.ai_available:
            st.warning("‚ö†Ô∏è AI nie je dostupn√© - zadajte OpenAI API kƒæ√∫ƒç")
            return {}
        
        system_prompt = """
Si expert na parsovanie konverz√°ci√≠ o pracovn√Ωch poz√≠ci√°ch. 
Tvoja √∫loha je extrahova≈• ≈°trukt√∫rovan√© d√°ta z ChatGPT konverz√°cie o poz√≠cii.

V√ùSTUP MUS√ç BY≈§ VALID JSON s t√Ωmito poƒæami (v≈°etky s√∫ string):
{
    "name": "n√°zov poz√≠cie",
    "description": "popis poz√≠cie",
    "department": "oddelenie", 
    "level": "√∫rove≈à zodpovednosti",
    "responsibilities": "zodpovednosti oddelen√© \\n",
    "requirements": "po≈æiadavky na poz√≠ciu",
    "tools_systems": "n√°stroje a syst√©my",
    "work_time": "pracovn√Ω ƒças",
    "challenges": "v√Ωzvy poz√≠cie",
    "success_metrics": "KPI a metriky √∫spechu"
}

Ak niektor√© pole nen√°jde≈°, nastav ho na pr√°zdny string "".
Vr√°≈• V√ùLUƒåNE JSON bez ak√Ωchkoƒævek dodatoƒçn√Ωch textov.
"""
        
        user_prompt = f"""
Parsuj t√∫to ChatGPT konverz√°ciu a extraktuj d√°ta o poz√≠cii:

{conversation}

Vr√°≈• VALID JSON s extraktovan√Ωmi d√°tami o poz√≠cii.
"""
        
        if ai_engine.use_new_client:
            response = ai_engine.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1000,
                temperature=0.1
            )
            result = response.choices[0].message.content.strip()
        else:
            import openai
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1000,
                temperature=0.1
            )
            result = response.choices[0].message.content.strip()
        
        # Parsuj JSON
        import json
        import re
        
        # Oƒçisti JSON (odstr√°≈à markdown bloky ak existuj√∫)
        json_match = re.search(r'```(?:json)?\s*(\{.*?\})\s*```', result, re.DOTALL)
        if json_match:
            result = json_match.group(1)
        
        # Parsuj JSON
        parsed_data = json.loads(result)
        
        # Valid√°cia a ƒçistenie d√°t
        cleaned_data = {}
        for key, value in parsed_data.items():
            if isinstance(value, str):
                cleaned_data[key] = value.strip()
            else:
                cleaned_data[key] = str(value).strip() if value else ""
        
        return cleaned_data
        
    except Exception as e:
        st.error(f"‚ùå Chyba parsovania poz√≠cie: {e}")
        return {}

def get_ai_suggestion(field: Dict, current_data: Dict) -> str:
    """Z√≠ska AI n√°vrh pre pole"""
    try:
        ai_engine = RealAIReasoningEngine()
        
        if not ai_engine.ai_available:
            st.warning("‚ö†Ô∏è AI nie je dostupn√© - zadajte OpenAI API kƒæ√∫ƒç")
            return ""
        
        # Vytvor prompt na z√°klade aktu√°lnych d√°t
        prompt = field['ai_prompt'].format(**current_data)
        
        # ≈†peci√°lne spracovanie pre department - pridaj existuj√∫ce oddelenia
        additional_context = ""
        if field['key'] == 'department':
            existing_departments = load_existing_departments()
            if existing_departments:
                additional_context = f"\nExistuj√∫ce oddelenia v datab√°ze: {', '.join(existing_departments)}"
        
        system_prompt = f"""
Si HR expert na vytv√°ranie poz√≠ci√≠. 
Poz√≠cia: {current_data.get('name', 'poz√≠cia')}
Oddelenie: {current_data.get('department', 'v≈°eobecn√©')}{additional_context}

Nap√≠≈° kr√°tku, praktick√∫ odpoveƒè v slovenƒçine.
"""
        
        if ai_engine.use_new_client:
            response = ai_engine.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.4
            )
            return response.choices[0].message.content.strip()
        else:
            import openai
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.4
            )
            return response.choices[0].message.content.strip()
            
    except Exception as e:
        st.error(f"‚ùå Chyba AI n√°vrhu: {e}")
        return ""

def save_position_to_db(position_data: Dict):
    """Ulo≈æ√≠ poz√≠ciu do datab√°zy"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            # Vytvor tabuƒæku ak neexistuje
            conn.execute("""
                CREATE TABLE IF NOT EXISTS positions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    description TEXT,
                    department TEXT,
                    level TEXT,
                    responsibilities TEXT,
                    requirements TEXT,
                    tools_systems TEXT,
                    work_time TEXT,
                    challenges TEXT,
                    success_metrics TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            conn.execute("""
                INSERT INTO positions (
                    name, description, department, level, responsibilities,
                    requirements, tools_systems, work_time, challenges, success_metrics
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                position_data.get('name', ''),
                position_data.get('description', ''),
                position_data.get('department', ''),
                position_data.get('level', ''),
                position_data.get('responsibilities', ''),
                position_data.get('requirements', ''),
                position_data.get('tools_systems', ''),
                position_data.get('work_time', ''),
                position_data.get('challenges', ''),
                position_data.get('success_metrics', '')
            ))
            conn.commit()
    except Exception as e:
        st.error(f"‚ùå Chyba ukladania: {e}")

def save_position_from_learning():
    """Ulo≈æ√≠ poz√≠ciu z AI learning session - backward compatibility funkcia"""
    try:
        if not st.session_state.get('position_learning_history'):
            return
        
        # Extraktovanie d√°t z AI learning hist√≥rie
        history = st.session_state.position_learning_history
        
        position_name = history[0]['response'] if len(history) > 0 else "Nov√° poz√≠cia"
        position_description = history[1]['response'] if len(history) > 1 else ""
        position_department = history[2]['response'] if len(history) > 2 else ""
        
        # V bud√∫cnosti tu bude ukladanie do datab√°zy
        position_data = {
            'name': position_name,
            'description': position_description,
            'department': position_department,
            'learning_history': history,
            'created_at': datetime.now().isoformat()
        }
        
        # Ulo≈æenie do JSON s√∫boru ako demo
        try:
            with open("positions_ai_learned.json", "a", encoding="utf-8") as f:
                f.write(json.dumps(position_data, ensure_ascii=False) + "\n")
        except:
            pass
            
    except Exception as e:
        st.error(f"‚ùå Chyba ukladania poz√≠cie: {e}")

def render_edit_position():
    """Edit√°cia poz√≠cie"""
    st.markdown("## ‚úèÔ∏è Edit√°cia poz√≠cie")
    
    position_id = st.session_state.get('edit_position_id')
    if not position_id:
        st.error("‚ùå ≈Ωiadna poz√≠cia na edit√°ciu")
        if st.button("üîô Sp√§≈• na zoznam"):
            st.session_state.mode = "positions"
            st.rerun()
        return
    
    # Naƒç√≠taj poz√≠ciu
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("SELECT * FROM positions WHERE id = ?", (position_id,))
            position = dict(cursor.fetchone())
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania: {e}")
        return
    
    st.markdown(f"### Edit√°cia: {position['name']}")
    
    # Editaƒçn√Ω formul√°r
    with st.form("edit_position_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            new_name = st.text_input("N√°zov poz√≠cie:", value=position.get('name', ''))
            new_department = st.text_input("Oddelenie:", value=position.get('department', ''))
            new_level = st.text_input("√örove≈à:", value=position.get('level', ''))
            new_work_time = st.text_input("Pracovn√Ω ƒças:", value=position.get('work_time', ''))
        
        with col2:
            new_description = st.text_area("Popis:", value=position.get('description', ''), height=100)
            new_tools = st.text_area("N√°stroje/Syst√©my:", value=position.get('tools_systems', ''), height=100)
        
        new_responsibilities = st.text_area("Zodpovednosti:", value=position.get('responsibilities', ''))
        new_requirements = st.text_area("Po≈æiadavky:", value=position.get('requirements', ''))
        new_challenges = st.text_area("V√Ωzvy:", value=position.get('challenges', ''))
        new_success = st.text_area("Meranie √∫spechu:", value=position.get('success_metrics', ''))
        
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            submit = st.form_submit_button("üíæ Ulo≈æi≈•", type="primary")
        
        with col2:
            if st.form_submit_button("‚ùå Zru≈°i≈•"):
                st.session_state.mode = "positions"
                st.rerun()
        
        with col3:
            if st.form_submit_button("üóëÔ∏è Zmaza≈•"):
                st.session_state.confirm_delete_position = True
    
    if submit:
        try:
            with sqlite3.connect("adsun_processes.db") as conn:
                conn.execute("""
                    UPDATE positions SET
                        name = ?, description = ?, department = ?, level = ?,
                        responsibilities = ?, requirements = ?, tools_systems = ?,
                        work_time = ?, challenges = ?, success_metrics = ?,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                """, (
                    new_name, new_description, new_department, new_level,
                    new_responsibilities, new_requirements, new_tools,
                    new_work_time, new_challenges, new_success, position_id
                ))
                conn.commit()
            
            st.success("‚úÖ Poz√≠cia upraven√°!")
            st.session_state.mode = "positions"
            st.rerun()
            
        except Exception as e:
            st.error(f"‚ùå Chyba ukladania: {e}")
    
    # Potvrdenie mazania
    if st.session_state.get('confirm_delete_position'):
        st.warning("‚ö†Ô∏è Naozaj chcete zmaza≈• t√∫to poz√≠ciu?")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚úÖ √Åno, zmaza≈•", type="primary"):
                try:
                    with sqlite3.connect("adsun_processes.db") as conn:
                        conn.execute("DELETE FROM positions WHERE id = ?", (position_id,))
                        conn.commit()
                    
                    st.success("‚úÖ Poz√≠cia zmazan√°!")
                    st.session_state.mode = "positions"
                    del st.session_state.confirm_delete_position
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå Chyba mazania: {e}")
        
        with col2:
            if st.button("‚ùå Nie, zru≈°i≈•"):
                del st.session_state.confirm_delete_position
                st.rerun()
    
    # Sp√§≈• button
    st.markdown("---")
    if st.button("üîô Sp√§≈• na poz√≠cie"):
        st.session_state.mode = "positions"
        del st.session_state.edit_position_id
        st.rerun() 