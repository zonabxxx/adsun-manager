#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ADSUN Departments Management
Spr√°va oddelen√≠ s AI-driven vytv√°ran√≠m
"""

import streamlit as st
import sqlite3
import json
from datetime import datetime
from typing import Dict, List, Optional
from ui_components import render_section_header, render_action_buttons, render_modern_dataframe

def render_departments():
    """Render spr√°vy oddelen√≠"""
    
    # Naƒç√≠tanie oddelen√≠ z procesov
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row  # Fix: pridan√© pre dict() konverziu
            cursor = conn.execute("""
                SELECT category, COUNT(*) as process_count,
                       AVG(automation_readiness) as avg_automation,
                       GROUP_CONCAT(DISTINCT owner) as employees
                FROM processes 
                WHERE is_active = 1 AND category IS NOT NULL
                GROUP BY category
                ORDER BY process_count DESC
            """)
            departments = [dict(row) for row in cursor.fetchall()]
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania oddelen√≠: {e}")
        departments = []
    
    # Modern√Ω header so ≈°tatistikami
    total_processes = sum(dept.get('process_count', 0) for dept in departments)
    avg_automation = sum(dept.get('avg_automation', 0) or 0 for dept in departments) / len(departments) if departments else 0
    
    stats = {
        "departments": {"icon": "üè¢", "text": f"{len(departments)} oddelen√≠"},
        "processes": {"icon": "üìã", "text": f"{total_processes} procesov"},
        "automation": {"icon": "ü§ñ", "text": f"{avg_automation:.1f}/5 automatiz√°cia"}
    }
    
    render_section_header(
        title="Oddelenia",
        subtitle="Spr√°va firemn√Ωch oddelen√≠ a ich procesov",
        icon="üè¢",
        stats=stats
    )
    
    # DETAILY MIMO EXPANDERA - AK S√ö ZOBRAZEN√â
    if 'show_department_details' in st.session_state:
        category = st.session_state.show_department_details
        st.markdown("---")
        show_department_details(category)
        
        if st.button("‚ùå Zavrie≈• detaily", type="secondary"):
            del st.session_state.show_department_details
            st.rerun()
        
        st.markdown("---")
    
    # Pridanie nov√©ho oddelenia
    with st.expander("‚ûï Prida≈• nov√© oddelenie"):
        if st.session_state.get('department_learning_mode', False):
            render_department_learning()
        else:
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.markdown("**ü§ñ AI v√°s povedie ot√°zkami pre vytvorenie oddelenia**")
                st.info("AI polo≈æ√≠ inteligentn√© ot√°zky o novom oddelen√≠ - jeho funkcii, procesoch, ƒæuƒèoch a zodpovednostiach.")
            
            with col2:
                if st.button("üöÄ Zaƒça≈• s AI", type="primary"):
                    st.session_state.department_learning_mode = True
                    st.session_state.department_learning_step = 0
                    st.session_state.department_learning_history = []
                    st.rerun()
    
    # Zobrazenie existuj√∫cich oddelen√≠
    if not departments:
        st.info("üè¢ ≈Ωiadne oddelenia e≈°te nie s√∫ definovan√©")
        return
    
    # POTVRDENIE MAZANIA ODDELENIA
    if 'confirm_delete_department' in st.session_state:
        department_name = st.session_state.confirm_delete_department
        process_count = st.session_state.department_process_count
        
        st.warning(f"‚ö†Ô∏è **Pozor!** Chyst√°te sa zmaza≈• oddelenie **{department_name}** ktor√© obsahuje **{process_count} procesov**")
        
        # Naƒç√≠tanie in√Ωch oddelen√≠ pre transfer
        other_departments = [d['category'] for d in departments if d['category'] != department_name]
        
        if other_departments:
            st.markdown("**üéØ Vyberte mo≈ænos≈•:**")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üóëÔ∏è Zmaza≈• oddelenie + v≈°etky procesy", type="secondary"):
                    delete_department_and_processes(department_name)
                    del st.session_state.confirm_delete_department
                    del st.session_state.department_process_count
                    st.success(f"‚úÖ Oddelenie {department_name} a v≈°etky jeho procesy boli zmazan√©!")
                    st.rerun()
            
            with col2:
                st.markdown("**üìã Alebo presun√∫≈• procesy do:**")
                target_department = st.selectbox(
                    "Cieƒæov√© oddelenie:",
                    other_departments,
                    key="target_dept_transfer"
                )
                
                if st.button(f"üì§ Presun√∫≈• do {target_department}", type="primary"):
                    transfer_department_processes(department_name, target_department)
                    del st.session_state.confirm_delete_department
                    del st.session_state.department_process_count
                    st.success(f"‚úÖ Procesy z {department_name} boli presunut√© do {target_department}!")
                    st.rerun()
        else:
            st.markdown("**‚ö†Ô∏è Toto je jedin√© oddelenie - m√¥≈æete len zmaza≈• v≈°etky procesy:**")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üóëÔ∏è Zmaza≈• oddelenie + v≈°etky procesy", type="secondary"):
                    delete_department_and_processes(department_name)
                    del st.session_state.confirm_delete_department
                    del st.session_state.department_process_count
                    st.success(f"‚úÖ Oddelenie {department_name} a v≈°etky jeho procesy boli zmazan√©!")
                    st.rerun()
            
            with col2:
                if st.button("‚ùå Zru≈°i≈•", type="primary"):
                    del st.session_state.confirm_delete_department
                    del st.session_state.department_process_count
                    st.rerun()
        
        # Mo≈ænos≈• zru≈°enia v≈ædy k dispoz√≠cii
        if st.button("‚ùå Zru≈°i≈• mazanie"):
            del st.session_state.confirm_delete_department
            del st.session_state.department_process_count
            st.rerun()
        
        st.markdown("---")
    
    # Modern√© zobrazenie oddelen√≠
    st.markdown("### üè¢ Prehƒæad oddelen√≠")
    
    # Pou≈æijeme jednotn√Ω ≈°t√Ωl pre v≈°etky oddelenia
    for dept in departments:
        with st.expander(f"üè¢ {dept['category']}", expanded=False):
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                # Z√°kladn√© info v jednotnom ≈°t√Ωle
                st.write(f"**üìã Procesy:** {dept['process_count']}")
                st.write(f"**ü§ñ Automatiz√°cia:** {dept['avg_automation']:.1f}/5")
                
                if dept['employees']:
                    employees = dept['employees'].split(',')
                    st.write(f"**üë• Zamestnanci:** {', '.join(employees[:3])}{'...' if len(employees) > 3 else ''}")
                    st.write(f"**üë• Poƒçet:** {len(employees)} ƒæud√≠")
            
            with col2:
                if st.button("üìã Procesy", key=f"processes_{dept['category']}", use_container_width=True):
                    show_department_processes(dept['category'])
                
                # TLAƒåIDLO DETAILY TERAZ ZOBRAZUJE MIMO EXPANDERA
                if st.button("üìä Detaily", key=f"details_{dept['category']}", use_container_width=True):
                    st.session_state.show_department_details = dept['category']
                    st.rerun()
            
            with col3:
                if st.button("‚úèÔ∏è Upravi≈•", key=f"edit_dept_{dept['category']}", use_container_width=True):
                    st.session_state.edit_department = dept['category']
                    st.session_state.mode = "edit_department"
                    st.rerun()
                
                if st.button("üóëÔ∏è Zmaza≈•", key=f"delete_dept_{dept['category']}", use_container_width=True):
                    st.session_state.confirm_delete_department = dept['category']
                    st.session_state.department_process_count = dept['process_count']
                    st.rerun()

def show_department_processes(category: str):
    """Zobraz√≠ procesy oddelenia"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("""
                SELECT name, owner, priority, automation_readiness
                FROM processes 
                WHERE category = ? AND is_active = 1
                ORDER BY priority DESC, name
            """, (category,))
            processes = [dict(row) for row in cursor.fetchall()]
        
        st.markdown(f"### üìã Procesy oddelenia: {category}")
        
        if processes:
            for proc in processes:
                st.write(f"‚Ä¢ **{proc['name']}** - {proc['owner']} ({proc['priority']}) - Automatiz√°cia: {proc['automation_readiness']}/5")
        else:
            st.info("≈Ωiadne procesy")
            
    except Exception as e:
        st.error(f"‚ùå Chyba: {e}")

def show_department_details(category: str):
    """Zobraz√≠ detailn√© inform√°cie o oddelen√≠"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            
            # Z√°kladn√© ≈°tatistiky oddelenia
            cursor = conn.execute("""
                SELECT 
                    COUNT(*) as total_processes,
                    AVG(automation_readiness) as avg_automation,
                    AVG(duration_minutes) as avg_duration,
                    COUNT(DISTINCT owner) as unique_owners,
                    GROUP_CONCAT(DISTINCT owner) as all_owners,
                    MAX(priority) as highest_priority,
                    COUNT(CASE WHEN automation_readiness >= 4 THEN 1 END) as highly_automated
                FROM processes 
                WHERE category = ? AND is_active = 1
            """, (category,))
            stats = dict(cursor.fetchone())
            
            st.markdown(f"### üìä Detaily oddelenia: {category}")
            
            # √öPLNE BEZ STƒπPCOV - v≈°etko pod sebou na pln√∫ ≈°√≠rku
            st.markdown("#### üìà Kƒæ√∫ƒçov√© metriky")
            
            # V≈°etko pod sebou namiesto stƒ∫pcov
            st.markdown(f"**üìã Celkom procesov v oddelen√≠:** {stats['total_processes']}")
            
            avg_auto = stats['avg_automation'] or 0
            st.markdown(f"**ü§ñ Priemern√° √∫rove≈à automatiz√°cie:** {avg_auto:.1f}/5")
            
            avg_dur = stats['avg_duration'] or 0
            st.markdown(f"**‚è±Ô∏è Priemern√© trvanie procesov:** {avg_dur:.0f} min√∫t")
            
            st.markdown(f"**üë• Poƒçet zamestnancov:** {stats['unique_owners']} ƒæud√≠")
            
            # Anal√Ωza na pln√∫ ≈°√≠rku
            st.markdown("---")
            st.markdown("#### üéØ Anal√Ωza oddelenia")
            
            # T√≠m - v≈°etko pod sebou
            st.markdown("**üë• T√≠m oddelenia:**")
            if stats['all_owners']:
                owners = stats['all_owners'].split(',')
                for owner in owners:
                    st.markdown(f"‚Ä¢ {owner.strip()}")
            else:
                st.markdown("‚Ä¢ ≈Ωiadni priraden√≠ vlastn√≠ci")
            
            st.markdown("")  # Medzera
            
            # Automatiz√°cia - v≈°etko pod sebou
            st.markdown("**üöÄ √örove≈à automatiz√°cie:**")
            highly_auto = stats['highly_automated'] or 0
            total = stats['total_processes'] or 1
            auto_percentage = (highly_auto / total) * 100
            st.markdown(f"‚Ä¢ Vysoko automatizovan√Ωch procesov: {highly_auto}/{total}")
            st.markdown(f"‚Ä¢ Percentu√°lne zast√∫penie: {auto_percentage:.1f}%")
            st.markdown(f"‚Ä¢ Najvy≈°≈°ia priorita: {stats['highest_priority'] or 'Neurƒçen√°'}")
            
            # Procesy oddelenia v ≈°ir≈°ej tabuƒæke
            cursor = conn.execute("""
                SELECT name, owner, priority, automation_readiness, duration_minutes
                FROM processes 
                WHERE category = ? AND is_active = 1
                ORDER BY priority DESC, automation_readiness DESC
            """, (category,))
            processes = [dict(row) for row in cursor.fetchall()]
            
            if processes:
                st.markdown("---")
                st.markdown("#### üìã Kompletn√Ω zoznam procesov")
                
                # ≈†ir≈°ia tabuƒæka procesov
                import pandas as pd
                df = pd.DataFrame(processes)
                df.columns = ['N√°zov procesu', 'Vlastn√≠k', 'Priorita', 'Automatiz√°cia', 'Trvanie (min)']
                
                # Konvertuj na stringy pre PyArrow kompatibilitu
                for col in df.columns:
                    df[col] = df[col].astype(str)
                
                st.dataframe(df, use_container_width=True, hide_index=True)
            else:
                st.info("üìù ≈Ωiadne procesy v tomto oddelen√≠")
            
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania detailov: {e}")

def render_department_learning():
    """AI-driven uƒçenie nov√©ho oddelenia s inteligentn√Ωm dopƒ∫≈àan√≠m"""
    st.markdown("### ü§ñ AI Asistent pre nov√© oddelenie")
    st.markdown("*AI v√°m pom√¥≈æe vyplni≈• v≈°etky polia o oddelen√≠*")
    
    # KONTROLA PREPNUTIA NA STEP-BY-STEP
    if st.session_state.get('switch_to_department_step_by_step', False):
        # Vyƒçist√≠me flag a resetujeme na step-by-step
        del st.session_state.switch_to_department_step_by_step
        # Nastav√≠me default hodnotu pre radio (bude sa zobrazova≈• step-by-step)
        default_method = "üîÑ Postupn√Ω sprievodca (krok za krokom)"
    else:
        # Ak nie je flag nastaven√Ω, pou≈æijeme existuj√∫cu hodnotu alebo default
        default_method = st.session_state.get('department_creation_method', "üîÑ Postupn√Ω sprievodca (krok za krokom)")
    
    # V√ùBER SP√îSOBU VYTVORENIA ODDELENIA
    st.markdown("#### üéØ Vyberte sp√¥sob vytvorenia oddelenia:")
    
    creation_method = st.radio(
        "Ako chcete vytvori≈• oddelenie?",
        [
            "üîÑ Postupn√Ω sprievodca (krok za krokom)",
            "üìã Bulk import z ChatGPT konverz√°cie"
        ],
        index=0 if default_method == "üîÑ Postupn√Ω sprievodca (krok za krokom)" else 1,
        key="department_creation_method"
    )
    
    if creation_method == "üìã Bulk import z ChatGPT konverz√°cie":
        render_department_bulk_import()
        return
    
    # P√îVODN√ù POSTUPN√ù SPRIEVODCA
    st.markdown("---")
    st.markdown("**üîÑ Postupn√Ω sprievodca - krok za krokom**")
    
    # INICIALIZ√ÅCIA D√ÅT AK NEEXISTUJ√ö - MUSI BY≈§ PRED PRV√ùM PR√çSTUPOM!
    if 'current_department_data' not in st.session_state:
        st.session_state.current_department_data = {}
    
    # DEFIN√çCIA POL√ç - MUSI BY≈§ PRED PRV√ùM POU≈ΩIT√çM!
    department_fields = [
        {
            'key': 'name',
            'label': 'N√°zov oddelenia',
            'question': 'Ak√Ω je n√°zov nov√©ho oddelenia?',
            'placeholder': 'napr. Marketing, Z√°kazn√≠cky servis, IT Support',
            'ai_prompt': 'Navrhni 3 alternat√≠vne n√°zvy pre oddelenie typu {value}'
        },
        {
            'key': 'function',
            'label': 'Hlavn√° funkcia',
            'question': 'Ak√° je hlavn√° funkcia tohto oddelenia?',
            'placeholder': 'Pop√≠≈°te ƒço toto oddelenie rob√≠ pre firmu...',
            'ai_prompt': 'Nap√≠≈° hlavn√∫ funkciu a √∫lohu oddelenia {name} vo firme'
        },
        {
            'key': 'manager',
            'label': 'Ved√∫ci oddelenia',
            'question': 'Kto bude ved√∫ci tohto oddelenia?',
            'placeholder': 'Meno a poz√≠cia ved√∫ceho...',
            'ai_prompt': 'Navrhni typ ved√∫cej poz√≠cie pre oddelenie {name}'
        },
        {
            'key': 'processes',
            'label': 'Hlavn√© procesy',
            'question': 'Ak√© procesy bude toto oddelenie vykon√°va≈•?',
            'placeholder': 'Vymenovajte hlavn√© ƒçinnosti a procesy...',
            'ai_prompt': 'Nap√≠≈° hlavn√© procesy a ƒçinnosti pre oddelenie {name}'
        },
        {
            'key': 'staff_count',
            'label': 'Poƒçet zamestnancov',
            'question': 'Koƒæko ƒæud√≠ bude v tomto oddelen√≠ pracova≈•?',
            'placeholder': 'Aktu√°lny alebo pl√°novan√Ω poƒçet...',
            'ai_prompt': 'Navrhni optim√°lny poƒçet zamestnancov pre oddelenie {name}'
        },
        {
            'key': 'competencies',
            'label': 'Kƒæ√∫ƒçov√© kompetencie',
            'question': 'Ak√© s√∫ kƒæ√∫ƒçov√© kompetencie tohto oddelenia?',
            'placeholder': 'ƒåo musia ƒæudia vedie≈•/umie≈•...',
            'ai_prompt': 'Nap√≠≈° kƒæ√∫ƒçov√© schopnosti a kompetencie pre oddelenie {name}'
        },
        {
            'key': 'collaboration',
            'label': 'Spolupr√°ca s oddeleniami',
            'question': 'S ak√Ωmi oddeleniami bude najƒçastej≈°ie spolupracova≈•?',
            'placeholder': 'In√© oddelenia, s ktor√Ωmi bude spolupracova≈•...',
            'ai_prompt': 'Navrhni oddelenia ktor√© najviac spolupracuj√∫ s oddelen√≠m {name}'
        },
        {
            'key': 'tools',
            'label': 'N√°stroje a syst√©my',
            'question': 'Ak√© n√°stroje/syst√©my bude toto oddelenie pou≈æ√≠va≈•?',
            'placeholder': 'Software, aplik√°cie, zariadenia...',
            'ai_prompt': 'Nap√≠≈° n√°stroje a syst√©my potrebn√© pre oddelenie {name}'
        },
        {
            'key': 'challenges',
            'label': 'Hlavn√© v√Ωzvy',
            'question': 'Ak√© s√∫ hlavn√© v√Ωzvy tohto oddelenia?',
            'placeholder': 'ƒåo m√¥≈æe by≈• problematick√©...',
            'ai_prompt': 'Pop√≠≈° hlavn√© v√Ωzvy a probl√©my pre oddelenie {name}'
        },
        {
            'key': 'success_metrics',
            'label': 'Meranie √∫spechu',
            'question': 'Ako sa bude mera≈• √∫spech tohto oddelenia?',
            'placeholder': 'KPI, metriky, ciele...',
            'ai_prompt': 'Navrhni KPI a metriky √∫spechu pre oddelenie {name}'
        }
    ]
    
    # KONTROLA PREDVYPLNEN√ùCH D√ÅT
    if st.session_state.current_department_data:
        filled_fields = sum(1 for field in department_fields if st.session_state.current_department_data.get(field['key']))
        total_fields = len(department_fields)
        
        # PROGRESS BAR
        progress = filled_fields / total_fields
        st.progress(progress, text=f"üìä Pokrok: {filled_fields}/{total_fields} pol√≠ vyplnen√Ωch ({progress:.0%})")
        
        st.info(f"üìã **Predvyplnen√© d√°ta:** {filled_fields}/{total_fields} pol√≠ u≈æ vyplnen√Ωch z bulk importu")
        
        # Mo≈ænos≈• preskoƒçi≈• na nevyplnen√© polia
        if filled_fields < total_fields:
            col1, col2 = st.columns([2, 1])
            with col1:
                st.markdown("üí° *M√¥≈æete zaƒça≈• od prv√©ho nevyplnen√©ho poƒæa alebo prech√°dza≈• postupne*")
            with col2:
                if st.button("‚è≠Ô∏è Preskoƒç na nevyplnen√©"):
                    # N√°jdi prv√Ω nevyplnen√Ω krok
                    for i, field in enumerate(department_fields):
                        if not st.session_state.current_department_data.get(field['key']):
                            st.session_state.department_learning_step = i
                            st.rerun()
                            break
        else:
            st.success("üéâ **V≈°etky polia s√∫ vyplnen√©!** M√¥≈æete pokraƒçova≈• na fin√°lny prehƒæad")
            if st.button("üèÅ Prejs≈• na fin√°lny prehƒæad"):
                st.session_state.department_learning_step = len(department_fields)
                st.rerun()
        
        # Zobrazenie prehƒæadu predvyplnen√Ωch d√°t
        with st.expander("üëÄ Zobrazi≈• v≈°etky predvyplnen√© d√°ta"):
            for field in department_fields:
                value = st.session_state.current_department_data.get(field['key'], '')
                if value:
                    st.markdown(f"‚úÖ **{field['label']}:** {value[:100]}{'...' if len(str(value)) > 100 else ''}")
                else:
                    st.markdown(f"‚≠ï **{field['label']}:** *Nevyplnen√©*")
    
    # Polia pre oddelenie s AI promptmi
    current_step = st.session_state.get('department_learning_step', 0)
    
    if current_step < len(department_fields):
        field = department_fields[current_step]
        
        # VYLEP≈†EN√ù HEADER S INDIK√ÅTOROM STAVU
        is_field_filled = bool(st.session_state.current_department_data.get(field['key']))
        status_icon = "‚úÖ" if is_field_filled else "‚≠ï"
        status_text = "u≈æ vyplnen√©" if is_field_filled else "nevyplnen√©"
        
        st.markdown(f"### üéØ Krok {current_step + 1}/{len(department_fields)}: {status_icon} {field['label']}")
        
        if is_field_filled:
            st.success(f"üí° **Toto pole je {status_text}** z bulk importu - m√¥≈æete hodnotu upravi≈• alebo ponecha≈•")
        else:
            st.info(f"üìù **Toto pole je {status_text}** - zadajte nov√∫ hodnotu alebo pou≈æite AI pomoc")
        
        st.info(field['question'])
        
        # Hlavn√© pole pre input
        col1, col2 = st.columns([3, 1])
        
        with col1:
            if field['key'] in ['function', 'processes', 'competencies', 'challenges', 'success_metrics']:
                user_input = st.text_area(
                    "‚úçÔ∏è Va≈°a odpoveƒè:",
                    value=st.session_state.current_department_data.get(field['key'], ''),
                    placeholder=field['placeholder'],
                    height=100,
                    key=f"field_{field['key']}"
                )
            else:
                user_input = st.text_input(
                    "‚úçÔ∏è Va≈°a odpoveƒè:",
                    value=st.session_state.current_department_data.get(field['key'], ''),
                    placeholder=field['placeholder'],
                    key=f"field_{field['key']}"
                )
        
        with col2:
            st.markdown("**ü§ñ AI Pomoc**")
            if st.button("‚ú® AI Doplni≈•", key=f"ai_help_{field['key']}"):
                ai_suggestion = get_department_ai_suggestion(field, st.session_state.current_department_data)
                if ai_suggestion:
                    st.session_state[f"ai_suggestion_{field['key']}"] = ai_suggestion
                    st.rerun()
        
        # AI n√°vrh ak existuje
        if f"ai_suggestion_{field['key']}" in st.session_state:
            st.success(f"ü§ñ AI n√°vrh: {st.session_state[f'ai_suggestion_{field['key']}']}")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ Pou≈æi≈• AI n√°vrh", key=f"use_ai_{field['key']}"):
                    st.session_state.current_department_data[field['key']] = st.session_state[f'ai_suggestion_{field['key']}']
                    del st.session_state[f'ai_suggestion_{field['key']}']
                    st.rerun()
            with col2:
                if st.button("‚ùå Zamietnu≈•", key=f"reject_ai_{field['key']}"):
                    del st.session_state[f'ai_suggestion_{field['key']}']
                    st.rerun()
        
        # Navigaƒçn√© tlaƒçidl√°
        col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
        
        with col1:
            if st.button("‚¨ÖÔ∏è Sp√§≈•") and current_step > 0:
                st.session_state.current_department_data[field['key']] = user_input
                st.session_state.department_learning_step = current_step - 1
                st.rerun()
        
        with col2:
            if st.button("‚û°Ô∏è ƒéalej"):
                st.session_state.current_department_data[field['key']] = user_input
                st.session_state.department_learning_step = current_step + 1
                st.rerun()
        
        with col3:
            if st.button("üíæ Ulo≈æi≈• oddelenie") and st.session_state.current_department_data.get('name'):
                st.session_state.current_department_data[field['key']] = user_input
                save_department_to_db(st.session_state.current_department_data)
                st.session_state.department_learning_mode = False
                st.success("‚úÖ Oddelenie ulo≈æen√©!")
                st.rerun()
        
        with col4:
            if st.button("‚ùå Zru≈°i≈•"):
                st.session_state.department_learning_mode = False
                st.rerun()
        
        # Aktualizuj d√°ta
        st.session_state.current_department_data[field['key']] = user_input
        
    else:
        # V≈°etky polia vyplnen√© - fin√°lny prehƒæad
        st.success("üéâ V≈°etky polia vyplnen√©!")
        st.markdown("### üìã Prehƒæad oddelenia:")
        
        for field in department_fields:
            value = st.session_state.current_department_data.get(field['key'], '')
            if value:
                st.markdown(f"**{field['label']}:** {value}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üíæ Ulo≈æi≈• oddelenie", type="primary"):
                save_department_to_db(st.session_state.current_department_data)
                st.session_state.department_learning_mode = False
                st.success("‚úÖ Oddelenie vytvoren√©!")
                st.rerun()
        
        with col2:
            if st.button("üìù Upravi≈•"):
                st.session_state.department_learning_step = 0
                st.rerun()

def render_department_bulk_import():
    """Bulk import oddelenia z ChatGPT konverz√°cie"""
    st.markdown("### üìã Bulk Import oddelenia z ChatGPT konverz√°cie")
    st.markdown("**üí° N√°vod:** Skop√≠rujte cel√∫ konverz√°ciu z ChatGPT kde ste diskutovali o oddelen√≠ a AI automaticky vypln√≠ v≈°etky polia.")
    
    # Pr√≠klad form√°tu
    with st.expander("üìñ Pr√≠klad ChatGPT konverz√°cie pre oddelenie"):
        st.markdown("""
**Pr√≠klad spr√°vneho form√°tu:**

```
Pou≈æ√≠vateƒæ: Chcem vytvori≈• nov√© marketing oddelenie pre na≈°u firmu

ChatGPT: Marketing oddelenie je kƒæ√∫ƒçov√© pre rast firmy. M√¥≈æem v√°m pom√¥c≈• ho navrhn√∫≈•:

**N√°zov oddelenia:** Marketing a komunik√°cia
**Hlavn√° funkcia:** Budovanie znaƒçky, z√≠skavanie z√°kazn√≠kov a komunik√°cia s verejnos≈•ou
**Ved√∫ci:** Marketing Manager alebo Head of Marketing

**Hlavn√© procesy:**
- Tvorba marketingov√Ωch kampan√≠
- Spr√°va soci√°lnych siet√≠
- PR a komunik√°cia s m√©diami
- Anal√Ωza trhu a konkurencie
- Event management

**Poƒçet zamestnancov:** 4-6 ƒæud√≠
**Kƒæ√∫ƒçov√© kompetencie:** Kreativita, analytick√© myslenie, komunikaƒçn√© schopnosti
**Spolupr√°ca:** Obchod, IT, Vedenie
**N√°stroje:** Google Analytics, Facebook Ads, Canva, CRM syst√©m
**V√Ωzvy:** R√Ωchle zmeny v digit√°lnom marketingu
**KPI:** ROI kampan√≠, brand awareness, lead generation
```
        """)
    
    # Vstupn√© pole pre konverz√°ciu
    conversation_text = st.text_area(
        "üìù Vlo≈æte ChatGPT konverz√°ciu o oddelen√≠:",
        height=400,
        placeholder="Skop√≠rujte sem cel√∫ konverz√°ciu z ChatGPT...",
        key="department_bulk_conversation_input"
    )
    
    # Tlaƒçidl√°
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if st.button("üöÄ Spracova≈• AI", type="primary", disabled=not conversation_text.strip()):
            with st.spinner("ü§ñ AI parsuje konverz√°ciu o oddelen√≠..."):
                parsed_data = parse_department_chatgpt_conversation(conversation_text)
                if parsed_data:
                    st.session_state.department_bulk_parsed_data = parsed_data
                    st.rerun()
                else:
                    st.error("‚ùå AI nedok√°zalo parsova≈• konverz√°ciu. Sk√∫ste in√Ω form√°t.")
    
    with col2:
        if st.button("üîÑ Prepn√∫≈• na sprievodcu"):
            # Nastav√≠me flag na prepnutie na step-by-step  
            st.session_state.switch_to_department_step_by_step = True
            st.rerun()
    
    with col3:
        if st.button("‚ùå Zru≈°i≈•"):
            st.session_state.department_learning_mode = False
            st.rerun()
    
    # Zobrazenie parsovan√Ωch d√°t
    if 'department_bulk_parsed_data' in st.session_state:
        parsed_data = st.session_state.department_bulk_parsed_data
        
        st.markdown("---")
        st.success("‚úÖ AI √∫spe≈°ne parsovalo konverz√°ciu o oddelen√≠!")
        st.markdown("### üìã Extraktovan√© d√°ta oddelenia:")
        st.info("üí° **M√¥≈æete upravi≈• ƒæubovoƒæn√© pole pred ulo≈æen√≠m**")
        
        # EDITOVATEƒΩN√Å FORMA PRE V≈†ETKY POLIA
        with st.form("edit_department_bulk_data_form"):
            st.markdown("#### ‚úèÔ∏è Upravte parsovan√© d√°ta oddelenia:")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üìä Z√°kladn√© inform√°cie**")
                
                edited_name = st.text_input(
                    "üè¢ N√°zov oddelenia:",
                    value=parsed_data.get('name', ''),
                    key="edit_dept_name"
                )
                
                edited_function = st.text_input(
                    "‚öôÔ∏è Hlavn√° funkcia:",
                    value=parsed_data.get('function', ''),
                    key="edit_dept_function"
                )
                
                edited_manager = st.text_input(
                    "üë§ Ved√∫ci:",
                    value=parsed_data.get('manager', ''),
                    key="edit_dept_manager"
                )
                
                edited_size = st.text_input(
                    "üë• Veƒækos≈• t√≠mu:",
                    value=parsed_data.get('size', ''),
                    key="edit_dept_size"
                )
            
            with col2:
                st.markdown("**üìù Popis oddelenia**")
                
                edited_description = st.text_area(
                    "üìñ Popis oddelenia:",
                    value=parsed_data.get('description', ''),
                    height=120,
                    key="edit_dept_description"
                )
            
            # Dlh√© texty na pln√∫ ≈°√≠rku
            st.markdown("**üìù Detailn√© inform√°cie**")
            
            edited_responsibilities = st.text_area(
                "üìã Zodpovednosti:",
                value=parsed_data.get('responsibilities', ''),
                height=120,
                key="edit_dept_responsibilities"
            )
            
            edited_processes = st.text_area(
                "‚öôÔ∏è Hlavn√© procesy:",
                value=parsed_data.get('processes', ''),
                height=100,
                key="edit_dept_processes"
            )
            
            edited_tools = st.text_area(
                "üõ†Ô∏è N√°stroje a syst√©my:",
                value=parsed_data.get('tools_systems', ''),
                height=80,
                key="edit_dept_tools"
            )
            
            edited_challenges = st.text_area(
                "‚ö†Ô∏è V√Ωzvy:",
                value=parsed_data.get('challenges', ''),
                height=80,
                key="edit_dept_challenges"
            )
            
            edited_goals = st.text_area(
                "üéØ Ciele a KPI:",
                value=parsed_data.get('goals', ''),
                height=80,
                key="edit_dept_goals"
            )
            
            # Tlaƒçidl√° formul√°ra
            st.markdown("---")
            col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
            
            with col1:
                save_edited = st.form_submit_button("üíæ Ulo≈æi≈• upraven√©", type="primary")
            
            with col2:
                apply_changes = st.form_submit_button("‚úÖ Aplikova≈• zmeny")
            
            with col3:
                go_to_guide = st.form_submit_button("üìù Pokraƒçova≈• v sprievodcovi")
            
            with col4:
                discard_all = st.form_submit_button("üóëÔ∏è Zahodi≈•")
        
        # Spracovanie formul√°ra
        if save_edited:
            # Ulo≈æ upraven√© d√°ta priamo
            final_data = {
                'name': edited_name,
                'description': edited_description,
                'function': edited_function,
                'manager': edited_manager,
                'size': edited_size,
                'responsibilities': edited_responsibilities,
                'processes': edited_processes,
                'tools_systems': edited_tools,
                'challenges': edited_challenges,
                'goals': edited_goals
            }
            save_department_to_db(final_data)
            del st.session_state.department_bulk_parsed_data
            st.session_state.department_learning_mode = False
            st.success("‚úÖ Oddelenie ulo≈æen√© s √∫pravami!")
            st.rerun()
        
        elif apply_changes:
            # Aplikuj zmeny do parsed_data a zobrazi≈• aktualizovan√©
            st.session_state.department_bulk_parsed_data = {
                'name': edited_name,
                'description': edited_description,
                'function': edited_function,
                'manager': edited_manager,
                'size': edited_size,
                'responsibilities': edited_responsibilities,
                'processes': edited_processes,
                'tools_systems': edited_tools,
                'challenges': edited_challenges,
                'goals': edited_goals
            }
            st.success("‚úÖ Zmeny aplikovan√©! Skontrolujte v√Ωsledok ni≈æ≈°ie.")
            st.rerun()
        
        elif go_to_guide:
            # Presun do postupn√©ho sprievodcu s upraven√Ωmi d√°tami
            final_data = {
                'name': edited_name,
                'description': edited_description,
                'function': edited_function,
                'manager': edited_manager,
                'size': edited_size,
                'responsibilities': edited_responsibilities,
                'processes': edited_processes,
                'tools_systems': edited_tools,
                'challenges': edited_challenges,
                'goals': edited_goals
            }
            st.session_state.current_department_data = final_data
            st.session_state.department_learning_step = 0
            del st.session_state.department_bulk_parsed_data
            st.session_state.switch_to_department_step_by_step = True
            st.rerun()
        
        elif discard_all:
            del st.session_state.department_bulk_parsed_data
            st.rerun()

def get_department_ai_suggestion(field: Dict, current_data: Dict) -> str:
    """Z√≠ska AI n√°vrh pre pole oddelenia"""
    try:
        from ai_components import RealAIReasoningEngine
        ai_engine = RealAIReasoningEngine()
        
        if not ai_engine.ai_available:
            st.warning("‚ö†Ô∏è AI nie je dostupn√© - zadajte OpenAI API kƒæ√∫ƒç")
            return ""
        
        # Vytvor prompt na z√°klade aktu√°lnych d√°t
        prompt = field['ai_prompt'].format(**current_data)
        
        system_prompt = f"""
Si expert na organizaƒçn√∫ ≈°trukt√∫ru firiem a tvorbu oddelen√≠.
Oddelenie: {current_data.get('name', 'oddelenie')}
Funkcia: {current_data.get('function', 'v≈°eobecn√°')}

Nap√≠≈° kr√°tku, praktick√∫ odpoveƒè v slovenƒçine.
"""
        
        if ai_engine.use_new_client:
            response = ai_engine.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.4
            )
            return response.choices[0].message.content.strip()
        else:
            import openai
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.4
            )
            return response.choices[0].message.content.strip()
            
    except Exception as e:
        st.error(f"‚ùå Chyba AI n√°vrhu: {e}")
        return ""

def save_department_to_db(department_data: Dict):
    """Ulo≈æ√≠ oddelenie do datab√°zy s nov√Ωm form√°tom"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            # Vytvor tabuƒæku ak neexistuje
            conn.execute("""
                CREATE TABLE IF NOT EXISTS departments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    function TEXT,
                    manager TEXT,
                    processes TEXT,
                    staff_count TEXT,
                    competencies TEXT,
                    collaboration TEXT,
                    tools TEXT,
                    challenges TEXT,
                    success_metrics TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            conn.execute("""
                INSERT INTO departments (
                    name, function, manager, processes, staff_count,
                    competencies, collaboration, tools, challenges, success_metrics
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                department_data.get('name', ''),
                department_data.get('function', ''),
                department_data.get('manager', ''),
                department_data.get('processes', ''),
                department_data.get('staff_count', ''),
                department_data.get('competencies', ''),
                department_data.get('collaboration', ''),
                department_data.get('tools', ''),
                department_data.get('challenges', ''),
                department_data.get('success_metrics', '')
            ))
            conn.commit()
    except Exception as e:
        st.error(f"‚ùå Chyba ukladania: {e}")

def save_department_from_learning():
    """Ulo≈æ√≠ oddelenie z AI learning session"""
    try:
        if not st.session_state.get('department_learning_history'):
            return
        
        # Extraktovanie d√°t z odpoved√≠
        history = st.session_state.department_learning_history
        
        dept_name = history[0]['response'] if len(history) > 0 else "Nov√© oddelenie"
        dept_function = history[1]['response'] if len(history) > 1 else ""
        dept_head = history[2]['response'] if len(history) > 2 else ""
        
        # V bud√∫cnosti tu bude ukladanie do datab√°zy
        # Zatiaƒæ len log
        department_data = {
            'name': dept_name,
            'function': dept_function,
            'head': dept_head,
            'learning_history': history,
            'created_at': datetime.now().isoformat()
        }
        
        # Ulo≈æenie do JSON s√∫boru ako demo
        try:
            with open("departments_ai_learned.json", "a", encoding="utf-8") as f:
                f.write(json.dumps(department_data, ensure_ascii=False) + "\n")
        except:
            pass
            
    except Exception as e:
        st.error(f"‚ùå Chyba ukladania: {e}")

def render_edit_department():
    """Edit√°cia oddelenia"""
    st.markdown("## ‚úèÔ∏è Edit√°cia oddelenia") 
    st.markdown("*Upravte detaily oddelenia*")
    
    department_name = st.session_state.get('edit_department')
    if not department_name:
        st.error("‚ùå ≈Ωiadne oddelenie na edit√°ciu")
        if st.button("üîô Sp√§≈• na zoznam"):
            st.session_state.mode = "departments"
            st.rerun()
        return
    
    st.info("üîß Edit√°cia oddelen√≠ bude dostupn√° po roz≈°√≠ren√≠ datab√°zy o departments tabuƒæku")
    
    # Zatiaƒæ len basic info
    st.markdown(f"### Edit√°cia oddelenia: {department_name}")
    
    # Naƒç√≠tanie procesov oddelenia
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("""
                SELECT id, name, owner, priority, automation_readiness
                FROM processes 
                WHERE category = ? AND is_active = 1
                ORDER BY name
            """, (department_name,))
            processes = [dict(row) for row in cursor.fetchall()]
    except Exception as e:
        st.error(f"‚ùå Chyba naƒç√≠tavania: {e}")
        processes = []
    
    st.markdown("### üìã Procesy oddelenia:")
    if processes:
        for proc in processes:
            col1, col2, col3 = st.columns([3, 1, 1])
            
            with col1:
                st.write(f"**{proc['name']}** - {proc['owner']}")
            
            with col2:
                st.write(f"Priorita: {proc['priority']}")
            
            with col3:
                if st.button("‚úèÔ∏è", key=f"edit_proc_{proc['id']}"):
                    st.session_state.edit_process_id = proc['id']
                    st.session_state.mode = "edit_process"
                    st.rerun()
    else:
        st.info("≈Ωiadne procesy v tomto oddelen√≠")
    
    # Sp√§≈• button
    st.markdown("---")
    if st.button("üîô Sp√§≈• na oddelenia"):
        st.session_state.mode = "departments"
        if 'edit_department' in st.session_state:
            del st.session_state.edit_department
        st.rerun()

def delete_department_and_processes(department_name: str):
    """Zma≈æe oddelenie a v≈°etky jeho procesy (soft delete)"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            # Soft delete v≈°etk√Ωch procesov v oddelen√≠
            cursor = conn.execute(
                "UPDATE processes SET is_active = 0 WHERE category = ? AND is_active = 1", 
                (department_name,)
            )
            deleted_count = cursor.rowcount
            conn.commit()
            
            # Debug info
            print(f"üóëÔ∏è Deleted {deleted_count} processes from department: {department_name}")
            
    except Exception as e:
        st.error(f"‚ùå Chyba mazania oddelenia: {e}")
        raise e

def transfer_department_processes(source_department: str, target_department: str):
    """Presunie v≈°etky procesy z jedn√©ho oddelenia do druh√©ho"""
    try:
        with sqlite3.connect("adsun_processes.db") as conn:
            # Presun v≈°etk√Ωch akt√≠vnych procesov
            cursor = conn.execute(
                "UPDATE processes SET category = ? WHERE category = ? AND is_active = 1",
                (target_department, source_department)
            )
            transferred_count = cursor.rowcount
            conn.commit()
            
            # Debug info  
            print(f"üì§ Transferred {transferred_count} processes from {source_department} to {target_department}")
            
    except Exception as e:
        st.error(f"‚ùå Chyba presunutia procesov: {e}")
        raise e

def parse_department_chatgpt_conversation(conversation: str) -> dict:
    """Parsuje ChatGPT konverz√°ciu a extraktuje d√°ta o oddelen√≠"""
    try:
        from ai_components import RealAIReasoningEngine
        ai_engine = RealAIReasoningEngine()
        
        if not ai_engine.ai_available:
            st.warning("‚ö†Ô∏è AI nie je dostupn√© - zadajte OpenAI API kƒæ√∫ƒç")
            return {}
        
        system_prompt = """
Si expert na parsovanie konverz√°ci√≠ o firemn√Ωch oddeleniach. 
Tvoja √∫loha je extrahova≈• ≈°trukt√∫rovan√© d√°ta z ChatGPT konverz√°cie o oddelen√≠.

V√ùSTUP MUS√ç BY≈§ VALID JSON s t√Ωmito poƒæami (v≈°etky s√∫ string):
{
    "name": "n√°zov oddelenia",
    "function": "hlavn√° funkcia oddelenia",
    "manager": "ved√∫ci oddelenia", 
    "processes": "hlavn√© procesy oddelen√© \\n",
    "staff_count": "poƒçet zamestnancov",
    "competencies": "kƒæ√∫ƒçov√© kompetencie",
    "collaboration": "spolupr√°ca s oddeleniami",
    "tools": "n√°stroje a syst√©my",
    "challenges": "hlavn√© v√Ωzvy",
    "success_metrics": "KPI a metriky √∫spechu"
}

Ak niektor√© pole nen√°jde≈°, nastav ho na pr√°zdny string "".
Vr√°≈• V√ùLUƒåNE JSON bez ak√Ωchkoƒævek dodatoƒçn√Ωch textov.
"""
        
        user_prompt = f"""
Parsuj t√∫to ChatGPT konverz√°ciu a extraktuj d√°ta o oddelen√≠:

{conversation}

Vr√°≈• VALID JSON s extraktovan√Ωmi d√°tami o oddelen√≠.
"""
        
        if ai_engine.use_new_client:
            response = ai_engine.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1000,
                temperature=0.1
            )
            result = response.choices[0].message.content.strip()
        else:
            import openai
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1000,
                temperature=0.1
            )
            result = response.choices[0].message.content.strip()
        
        # Parsuj JSON
        import json
        import re
        
        # Oƒçisti JSON (odstr√°≈à markdown bloky ak existuj√∫)
        json_match = re.search(r'```(?:json)?\s*(\{.*?\})\s*```', result, re.DOTALL)
        if json_match:
            result = json_match.group(1)
        
        # Parsuj JSON
        parsed_data = json.loads(result)
        
        # Valid√°cia a ƒçistenie d√°t
        cleaned_data = {}
        for key, value in parsed_data.items():
            if isinstance(value, str):
                cleaned_data[key] = value.strip()
            else:
                cleaned_data[key] = str(value).strip() if value else ""
        
        return cleaned_data
        
    except Exception as e:
        st.error(f"‚ùå Chyba parsovania oddelenia: {e}")
        return {} 