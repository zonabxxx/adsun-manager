#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ADSUN Intelligent Agents Launcher
Hlavn√Ω sp√∫≈°≈•aƒç pre oba inteligentn√© agenty
"""

import os
import sys
import sqlite3
import json
from datetime import datetime

# Import na≈°ich agentov
from adsun_process_mapper_ai import ADSUNProcessMapperAI
from adsun_knowledge_assistant import ADSUNKnowledgeAssistant

class ADSUNAgentLauncher:
    """Hlavn√Ω launcher pre ADSUN agentov"""
    
    def __init__(self):
        self.db_path = "adsun_processes.db"
        self.setup_database()
    
    def setup_database(self):
        """Nastav√≠ datab√°zu a vytvor√≠ uk√°≈ækov√© d√°ta"""
        if not os.path.exists(self.db_path):
            print("üîß Inicializujem datab√°zu...")
            self._create_database()
            self._insert_sample_data()
            print("‚úÖ Datab√°za vytvoren√° s uk√°≈ækov√Ωmi d√°tami!")
    
    def _create_database(self):
        """Vytvor√≠ datab√°zu zo sch√©my"""
        with sqlite3.connect(self.db_path) as conn:
            if os.path.exists('database_schema.sql'):
                with open('database_schema.sql', 'r', encoding='utf-8') as f:
                    conn.executescript(f.read())
            else:
                # Z√°kladn√° sch√©ma ak s√∫bor neexistuje
                conn.executescript('''
                    CREATE TABLE processes (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name VARCHAR(255) NOT NULL,
                        category VARCHAR(100) NOT NULL,
                        trigger_type VARCHAR(255) NOT NULL,
                        owner VARCHAR(255) NOT NULL,
                        frequency VARCHAR(100) NOT NULL,
                        duration_minutes INTEGER,
                        priority VARCHAR(20) NOT NULL,
                        volume_per_period INTEGER,
                        success_criteria TEXT,
                        common_problems TEXT,
                        automation_readiness INTEGER,
                        tags TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        is_active BOOLEAN DEFAULT 1
                    );
                    
                    CREATE TABLE process_steps (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        process_id INTEGER NOT NULL,
                        step_number INTEGER NOT NULL,
                        title VARCHAR(255) NOT NULL,
                        description TEXT NOT NULL,
                        responsible_person VARCHAR(255) NOT NULL,
                        system_tool VARCHAR(255),
                        input_data TEXT,
                        action_details TEXT NOT NULL,
                        output_data TEXT,
                        decision_logic TEXT,
                        estimated_time_minutes INTEGER,
                        is_automated BOOLEAN DEFAULT 0,
                        automation_potential INTEGER,
                        FOREIGN KEY (process_id) REFERENCES processes(id)
                    );
                ''')
    
    def _insert_sample_data(self):
        """Vlo≈æ√≠ uk√°≈ækov√© d√°ta pre testovanie"""
        sample_processes = [
            {
                'name': 'Spracovanie objedn√°vok z√°kazn√≠kov',
                'category': 'obchod',
                'trigger_type': 'Prijatie objedn√°vky emailom alebo cez web',
                'owner': 'M√°ria Nov√°k - Obchodn√Ω mana≈æ√©r',
                'frequency': 'denne',
                'duration_minutes': 45,
                'priority': 'vysok√°',
                'volume_per_period': 25,
                'success_criteria': 'Objedn√°vka spracovan√° do 24 hod√≠n, z√°kazn√≠k informovan√Ω o stave',
                'common_problems': 'Ne√∫pln√© √∫daje v objedn√°vke, nedostupnos≈• tovaru, chyby v cenn√≠ku',
                'automation_readiness': 3,
                'tags': '["objedn√°vky", "z√°kazn√≠k", "predaj", "email"]'
            },
            {
                'name': 'Schvaƒæovanie dovoleniek',
                'category': 'HR',
                'trigger_type': '≈Ωiados≈• o dovolenku v HR syst√©me',
                'owner': 'Peter Kov√°ƒç - HR mana≈æ√©r',
                'frequency': 't√Ω≈ædenne',
                'duration_minutes': 15,
                'priority': 'stredn√°',
                'volume_per_period': 8,
                'success_criteria': 'Dovolenka schv√°len√°/zamietnut√° do 3 pracovn√Ωch dn√≠',
                'common_problems': 'Prekr√Ωvanie dovoleniek v t√≠me, nedostatoƒçn√© inform√°cie',
                'automation_readiness': 4,
                'tags': '["dovolenka", "schvaƒæovanie", "HR", "zamestnanci"]'
            },
            {
                'name': 'Faktur√°cia dod√°vateƒæom',
                'category': 'administrat√≠va',
                'trigger_type': 'Prijatie fakt√∫ry od dod√°vateƒæa',
                'owner': 'Anna Kr√°sna - √öƒçtovn√≠ƒçka',
                'frequency': 'denne',
                'duration_minutes': 20,
                'priority': 'vysok√°',
                'volume_per_period': 15,
                'success_criteria': 'Fakt√∫ra spracovan√° a uhraden√° do splatnosti',
                'common_problems': 'Ch√Ωbaj√∫ce pr√≠lohy, nespr√°vne √∫daje, duplicitn√© fakt√∫ry',
                'automation_readiness': 2,
                'tags': '["fakt√∫ra", "√∫ƒçtovn√≠ctvo", "platby", "dod√°vateƒæ"]'
            }
        ]
        
        with sqlite3.connect(self.db_path) as conn:
            for process in sample_processes:
                cursor = conn.execute('''
                    INSERT INTO processes (name, category, trigger_type, owner, frequency, 
                                         duration_minutes, priority, volume_per_period, 
                                         success_criteria, common_problems, automation_readiness, tags)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    process['name'], process['category'], process['trigger_type'],
                    process['owner'], process['frequency'], process['duration_minutes'],
                    process['priority'], process['volume_per_period'], 
                    process['success_criteria'], process['common_problems'],
                    process['automation_readiness'], process['tags']
                ))
                
                process_id = cursor.lastrowid
                
                # Pridaj uk√°≈ækov√© kroky pre prv√Ω proces
                if process['name'] == 'Spracovanie objedn√°vok z√°kazn√≠kov':
                    steps = [
                        {
                            'step_number': 1,
                            'title': 'Prijatie objedn√°vky',
                            'description': 'Kontrola a registr√°cia novej objedn√°vky',
                            'responsible_person': 'Obchodn√Ω z√°stupca',
                            'system_tool': 'CRM syst√©m',
                            'action_details': 'Skontrolova≈• √∫plnos≈• objedn√°vky a zada≈• do syst√©mu',
                            'estimated_time_minutes': 10
                        },
                        {
                            'step_number': 2,
                            'title': 'Kontrola dostupnosti',
                            'description': 'Overenie dostupnosti tovaru na sklade',
                            'responsible_person': 'Skladn√≠k',
                            'system_tool': 'Skladov√Ω syst√©m',
                            'action_details': 'Skontrolova≈• stav z√°sob a rezervova≈• tovar',
                            'estimated_time_minutes': 15
                        },
                        {
                            'step_number': 3,
                            'title': 'Potvrdenie objedn√°vky',
                            'description': 'Odoslanie potvrdenia z√°kazn√≠kovi',
                            'responsible_person': 'Obchodn√Ω z√°stupca',
                            'system_tool': 'Email + CRM',
                            'action_details': 'Vygenerova≈• a odosla≈• potvrdenie s term√≠nom dodania',
                            'estimated_time_minutes': 5
                        }
                    ]
                    
                    for step in steps:
                        conn.execute('''
                            INSERT INTO process_steps (process_id, step_number, title, description,
                                                     responsible_person, system_tool, action_details,
                                                     estimated_time_minutes)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        ''', (
                            process_id, step['step_number'], step['title'], step['description'],
                            step['responsible_person'], step['system_tool'], 
                            step['action_details'], step['estimated_time_minutes']
                        ))
    
    def show_main_menu(self):
        """Zobraz√≠ hlavn√© menu"""
        print("\n" + "="*60)
        print("üéØ ADSUN Intelligent Process Management System")
        print("="*60)
        print("\nü§ñ Dostupn√© AI agenti:")
        print("\n1Ô∏è‚É£  Process Mapper AI - Dokumentovanie nov√Ωch procesov")
        print("    ‚Ä¢ Inteligentn√© rozhovory s AI reasoning")
        print("    ‚Ä¢ Automatick√° anal√Ωza odpovƒõd√≠")
        print("    ‚Ä¢ Identifik√°cia medzier a optimaliz√°ci√≠")
        print("\n2Ô∏è‚É£  Knowledge Assistant AI - Poskytovanie inform√°ci√≠")
        print("    ‚Ä¢ Inteligentn√© odpovede na ot√°zky")
        print("    ‚Ä¢ Detekcia intentu a kontextov√° anal√Ωza")
        print("    ‚Ä¢ N√°vrhy optimaliz√°ci√≠ a rie≈°en√≠")
        print("\n3Ô∏è‚É£  Zobrazenie dostupn√Ωch procesov")
        print("4Ô∏è‚É£  Spr√°va datab√°zy")
        print("0Ô∏è‚É£  Ukonƒçi≈•")
        print("\n" + "-"*60)
    
    def launch_process_mapper(self):
        """Spust√≠ Process Mapper AI"""
        print("\nüöÄ Sp√∫≈°≈•am ADSUN Process Mapper AI...")
        print("-" * 50)
        
        mapper = ADSUNProcessMapperAI(self.db_path)
        
        print("üëã Vitajte v inteligentnom mapovaƒçi procesov!")
        documenter = input("üìù Zadajte va≈°e meno: ")
        
        print(mapper.start_documentation_session(documenter))
        
        while True:
            user_input = input("\nüë§ Va≈°a odpoveƒè: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'koniec', 'ukonƒçi≈•', 'sp√§≈•']:
                print("üîö Process Mapper ukonƒçen√Ω.")
                break
            
            if not user_input:
                continue
                
            response = mapper.process_response(user_input)
            print(f"\nü§ñ {response}")
            
            # Kontrola ukonƒçenia
            if "Chcete pokraƒçova≈• s dokumentovan√≠m ƒèal≈°ieho procesu?" in response:
                continue_choice = input("\n‚ñ∂Ô∏è Pokraƒçova≈•? (√°no/nie): ").strip().lower()
                if continue_choice in ['nie', 'n', 'no']:
                    print("üîö ƒéakujem za dokumentovanie procesov!")
                    break
    
    def launch_knowledge_assistant(self):
        """Spust√≠ Knowledge Assistant AI"""
        print("\nüöÄ Sp√∫≈°≈•am ADSUN Knowledge Assistant AI...")
        print("-" * 50)
        
        assistant = ADSUNKnowledgeAssistant(self.db_path)
        
        print("üéì Vitajte v inteligentnom asistentovi znalost√≠!")
        print("üí° Sp√Ωtajte sa na ƒçokoƒævek o procesoch v ADSUN")
        print("üìã Nap√≠≈°te 'procesy' pre zoznam dostupn√Ωch procesov")
        print("üîô Nap√≠≈°te 'sp√§≈•' pre n√°vrat do hlavn√©ho menu\n")
        
        while True:
            user_query = input("‚ùì Va≈°a ot√°zka: ").strip()
            
            if user_query.lower() in ['sp√§≈•', 'back', 'exit', 'quit']:
                print("üîö Knowledge Assistant ukonƒçen√Ω.")
                break
            
            if not user_query:
                continue
            
            if user_query.lower() in ['procesy', 'zoznam', 'list']:
                response = assistant.get_available_processes()
            else:
                response = assistant.answer_query(user_query)
            
            print(f"\nü§ñ {response}\n")
            print("-" * 50)
    
    def show_processes(self):
        """Zobraz√≠ v≈°etky dostupn√© procesy"""
        assistant = ADSUNKnowledgeAssistant(self.db_path)
        print("\nüìä Prehƒæad dostupn√Ωch procesov:")
        print("=" * 50)
        print(assistant.get_available_processes())
        
        input("\n‚èé Stlaƒçte Enter pre pokraƒçovanie...")
    
    def database_management(self):
        """Spr√°va datab√°zy"""
        print("\nüîß Spr√°va datab√°zy:")
        print("-" * 30)
        print("1. Vymaza≈• v≈°etky d√°ta")
        print("2. Obnovi≈• uk√°≈ækov√© d√°ta")
        print("3. Zobrazi≈• ≈°tatistiky")
        print("0. Sp√§≈•")
        
        choice = input("\nVyberte mo≈ænos≈•: ").strip()
        
        if choice == "1":
            confirm = input("‚ö†Ô∏è Naozaj chcete vymaza≈• v≈°etky d√°ta? (√°no/nie): ")
            if confirm.lower() in ['√°no', 'ano', 'yes', 'y']:
                self._clear_database()
                print("‚úÖ V≈°etky d√°ta boli vymazan√©.")
        
        elif choice == "2":
            self._insert_sample_data()
            print("‚úÖ Uk√°≈ækov√© d√°ta boli obnoven√©.")
        
        elif choice == "3":
            self._show_statistics()
        
        input("\n‚èé Stlaƒçte Enter pre pokraƒçovanie...")
    
    def _clear_database(self):
        """Vyma≈æe v≈°etky d√°ta z datab√°zy"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("DELETE FROM process_steps")
            conn.execute("DELETE FROM processes")
            conn.execute("DELETE FROM documentation_sessions")
    
    def _show_statistics(self):
        """Zobraz√≠ ≈°tatistiky datab√°zy"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("SELECT COUNT(*) FROM processes WHERE is_active = 1")
            process_count = cursor.fetchone()[0]
            
            cursor = conn.execute("SELECT COUNT(*) FROM process_steps")
            steps_count = cursor.fetchone()[0]
            
            cursor = conn.execute("""
                SELECT category, COUNT(*) 
                FROM processes 
                WHERE is_active = 1 
                GROUP BY category
            """)
            categories = cursor.fetchall()
        
        print(f"\nüìä ≈†tatistiky datab√°zy:")
        print(f"‚Ä¢ Akt√≠vne procesy: {process_count}")
        print(f"‚Ä¢ Celkov√Ω poƒçet krokov: {steps_count}")
        print(f"‚Ä¢ Kateg√≥rie procesov:")
        for category, count in categories:
            print(f"  - {category}: {count}")
    
    def run(self):
        """Hlavn√° sluƒçka aplik√°cie"""
        while True:
            self.show_main_menu()
            choice = input("üéØ Vyberte mo≈ænos≈• (0-4): ").strip()
            
            if choice == "1":
                self.launch_process_mapper()
            elif choice == "2":
                self.launch_knowledge_assistant()
            elif choice == "3":
                self.show_processes()
            elif choice == "4":
                self.database_management()
            elif choice == "0":
                print("\nüëã ƒéakujem za pou≈æ√≠vanie ADSUN AI syst√©mu!")
                break
            else:
                print("‚ùå Neplatn√° voƒæba. Sk√∫ste znovu.")
                input("‚èé Stlaƒçte Enter pre pokraƒçovanie...")

if __name__ == "__main__":
    print("üöÄ Inicializujem ADSUN Intelligent Process Management System...")
    
    try:
        launcher = ADSUNAgentLauncher()
        launcher.run()
    except KeyboardInterrupt:
        print("\n\nüëã Syst√©m ukonƒçen√Ω u≈æ√≠vateƒæom. Dovidenia!")
    except Exception as e:
        print(f"\n‚ùå Chyba: {e}")
        print("üîß Skontrolujte konfigur√°ciu a s√∫bory syst√©mu.") 